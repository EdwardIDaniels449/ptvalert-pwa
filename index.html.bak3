<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#ffffff">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="description" content="墨尔本交通信息共享平台">
    <meta name="apple-mobile-web-app-title" content="PtvAlert">
    
    <!-- 全局变量修复脚本 - 必须最先加载 -->
    <script src="./js/globals-fix.js"></script>
    <script src="./js/cache-functions.js"></script>
    <script src="config.js"></script>
    <script src="vapid-keys.js"></script>
    
    <!-- Firebase与Cloudflare同步脚本 -->
    <script src="./js/firebase-to-cloudflare-sync.js"></script>
    
    <!-- URL诊断和修复脚本 - 最先执行 -->
    <script>
        (function() {
            console.log('[URL诊断] 开始检查URL和网络问题');
            
            // 定义全局调试对象
            window._ptvalert_debug = {
                errors: [],
                warnings: [],
                fixes: []
            };
            
            function logDebug(type, message) {
                console.log(`[URL诊断] ${type}: ${message}`);
                if (type === 'ERROR') window._ptvalert_debug.errors.push(message);
                if (type === 'WARN') window._ptvalert_debug.warnings.push(message);
                if (type === 'FIX') window._ptvalert_debug.fixes.push(message);
            }
            
            // 检查当前环境
            const hostname = window.location.hostname;
            logDebug('INFO', `当前主机名: ${hostname}`);
            
            const isGithubPages = hostname.includes('github.io');
            if (isGithubPages) {
                logDebug('INFO', '检测到GitHub Pages环境');
                
                // 从URL中获取仓库名
                const pathSegments = window.location.pathname.split('/');
                let repoName = '';
                
                if (pathSegments.length >= 2 && pathSegments[1]) {
                    repoName = pathSegments[1];
                    logDebug('INFO', `检测到仓库名: ${repoName}`);
                    
                    // 设置全局变量供其他脚本使用
                    window.GITHUB_PAGES_BASE_PATH = '/' + repoName + '/';
                    window.IS_GITHUB_PAGES = true;
                }
                
                // 预先定义API_BASE_URL使用当前域名
                window.API_BASE_URL = 'https://' + hostname;
                logDebug('FIX', `已提前设置API_BASE_URL = ${window.API_BASE_URL}`);
            }
            
            // 为控制台添加诊断命令
            window.showPtvAlertDiagnostics = function() {
                console.log('===== PtvAlert 诊断信息 =====');
                console.log('当前URL:', window.location.href);
                console.log('主机名:', hostname);
                console.log('GitHub Pages:', isGithubPages ? '是' : '否');
                
                if (window._ptvalert_debug.errors.length > 0) {
                    console.log('\n错误:');
                    window._ptvalert_debug.errors.forEach(err => console.log('- ' + err));
                }
                
                if (window._ptvalert_debug.warnings.length > 0) {
                    console.log('\n警告:');
                    window._ptvalert_debug.warnings.forEach(warn => console.log('- ' + warn));
                }
                
                if (window._ptvalert_debug.fixes.length > 0) {
                    console.log('\n已应用修复:');
                    window._ptvalert_debug.fixes.forEach(fix => console.log('- ' + fix));
                }
                
                console.log('\nAPI配置:');
                console.log('API_BASE_URL =', window.API_BASE_URL || '未定义');
                
                if (window.PUSH_CONFIG) {
                    console.log('PUSH_CONFIG.SERVER_URL =', window.PUSH_CONFIG.SERVER_URL);
                }
                
                console.log('\nGitHub Pages配置:');
                console.log('IS_GITHUB_PAGES =', window.IS_GITHUB_PAGES || false);
                console.log('GITHUB_PAGES_BASE_PATH =', window.GITHUB_PAGES_BASE_PATH || '未定义');
                
                console.log('\n服务工作线程:');
                if ('serviceWorker' in navigator) {
                    navigator.serviceWorker.getRegistrations().then(regs => {
                        if (regs.length === 0) {
                            console.log('未注册Service Worker');
                        } else {
                            regs.forEach(reg => {
                                console.log(`Service Worker已注册: ${reg.scope}`);
                                console.log(`状态: ${reg.active ? '活动' : reg.installing ? '安装中' : reg.waiting ? '等待' : '未知'}`);
                            });
                        }
                    });
                } else {
                    console.log('此浏览器不支持Service Worker');
                }
                
                console.log('===== 诊断结束 =====');
                console.log('如需帮助请在控制台运行: showPtvAlertDiagnostics()');
            };
            
            // 输出诊断提示
            console.log('[URL诊断] 诊断完成。如需查看详细信息，请在控制台运行: showPtvAlertDiagnostics()');
        })();
    </script>
    
    <!-- 紧急内联修复GitHub Pages的路径问题 -->
    <script>
        (function() {
            // 检测是否为GitHub Pages环境
            if (window.location.hostname.includes('github.io')) {
                console.log('[内联修复] 检测到GitHub Pages环境，应用紧急修复');
                
                // 获取仓库名称
                const getRepoName = function() {
                    const pathSegments = window.location.pathname.split('/');
                    if (pathSegments.length >= 2 && pathSegments[1]) {
                        return pathSegments[1];
                    }
                    // 可能的硬编码回退值
                    return 'ptvalert-pwa';
                };
                
                const repoName = getRepoName();
                const basePath = '/' + repoName + '/';
                
                console.log('[内联修复] 检测到GitHub Pages仓库:', repoName);
                
                // 存储基础路径供后续脚本使用
                window.GITHUB_PAGES_BASE_PATH = basePath;
                window.IS_GITHUB_PAGES = true;
                
                // 修复API路径
                window.API_BASE_URL = 'https://ptvalert.pages.dev';
                
                // 修复Service Worker路径问题
                if ('serviceWorker' in navigator) {
                    // 保存原始注册方法
                    const originalRegister = navigator.serviceWorker.register;
                    
                    // 替换注册方法
                    navigator.serviceWorker.register = function(scriptURL, options) {
                        console.log('[内联修复] 拦截Service Worker注册:', scriptURL);
                        
                        // 添加仓库名称到路径
                        let newScriptURL = scriptURL;
                        if (scriptURL.startsWith('./')) {
                            newScriptURL = basePath + scriptURL.substring(2);
                        } else if (scriptURL.startsWith('/')) {
                            newScriptURL = basePath + scriptURL.substring(1);
                        } else if (!scriptURL.includes('://')) {
                            newScriptURL = basePath + scriptURL;
                        }
                        
                        // 修复作用域
                        let newOptions = options || {};
                        if (!newOptions.scope || newOptions.scope === '/' || newOptions.scope === './') {
                            newOptions.scope = basePath;
                        }
                        
                        console.log('[内联修复] 重写为:', newScriptURL, newOptions);
                        
                        // 使用修复后的参数调用原始方法
                        return originalRegister.call(this, newScriptURL, newOptions);
                    };
                    
                    console.log('[内联修复] Service Worker注册方法已修复');
                }
            }
        })();
    </script>
    
    <!-- GitHub Pages环境修复脚本 - 必须最先加载 -->
    <script src="./js/github-pages-fix.js"></script>
    
    <!-- 全局变量声明 -->
    <script>
      // 初始化全局变量
      window.currentLang = 'zh'; // 默认语言
    </script>
    
    <script>
        // 在页面加载时检查并卸载所有服务工作线程
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async function() {
                try {
                    console.log('开始处理Service Worker注册...');
                    
                    // 卸载所有服务工作线程以确保使用最新版本
                    const registrations = await navigator.serviceWorker.getRegistrations();
                    for (let registration of registrations) {
                        console.log('卸载旧的服务工作线程', registration.scope);
                        await registration.unregister();
                    }
                    console.log('所有服务工作线程已卸载，将重新注册最新版本');
                    
                    // 使用简单的相对路径注册Service Worker
                    try {
                        console.log('尝试使用相对路径注册Service Worker...');
                        const registration = await navigator.serviceWorker.register('./service-worker.js', {
                            scope: './'
                        });
                        console.log('Service Worker注册成功:', registration.scope);
                    } catch (mainError) {
                        console.error('使用主Service Worker注册失败:', mainError);
                        
                        // 尝试使用备用Service Worker
                        try {
                            console.log('尝试注册备用Service Worker...');
                            const fallbackReg = await navigator.serviceWorker.register('./fallback-service-worker.js', {
                                scope: './'
                            });
                            console.log('备用Service Worker注册成功:', fallbackReg.scope);
                        } catch (fallbackError) {
                            console.error('备用Service Worker注册也失败:', fallbackError);
                            
                            // 最后的回退 - 内联最小Service Worker
                            if (window.location.hostname.includes('github.io')) {
                                console.log('尝试使用内联Service Worker作为最后的回退...');
                                
                                const minimalSWBlob = new Blob([`
                                    // 最小化内联Service Worker
                                    self.addEventListener('install', () => self.skipWaiting());
                                    self.addEventListener('activate', event => event.waitUntil(clients.claim()));
                                    self.addEventListener('fetch', event => event.respondWith(fetch(event.request)));
                                    console.log('内联最小Service Worker已激活');
                                `], {type: 'application/javascript'});
                                
                                const minimalSWUrl = URL.createObjectURL(minimalSWBlob);
                                
                                try {
                                    const inlineReg = await navigator.serviceWorker.register(minimalSWUrl, {
                                        scope: './'
                                    });
                                    console.log('内联Service Worker注册成功:', inlineReg.scope);
                                } catch (inlineError) {
                                    console.error('所有Service Worker注册方法都失败:', inlineError);
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.error('处理服务工作线程时出错:', error);
                }
            });
        }
    </script>
    
    <title>PtvAlert - 地图标记系统</title>
    
    <!-- Manifest和图标 -->
    <link rel="manifest" href="./manifest.json">
    <!-- 内联基本favicon避免404错误 -->
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    
    <script>
        // 处理GitHub Pages环境下图标路径问题
        if (window.location.hostname.includes('github.io')) {
            const pathSegments = window.location.pathname.split('/');
            if (pathSegments.length >= 2 && pathSegments[1]) {
                const repoName = pathSegments[1];
                const basePath = '/' + repoName;
                
                // 更新图标链接
                document.querySelectorAll('link[rel="icon"], link[rel="apple-touch-icon"], link[rel="manifest"]').forEach(link => {
                    const href = link.getAttribute('href');
                    if (href && href.startsWith('./')) {
                        link.setAttribute('href', basePath + href.substring(1));
                        console.log('[路径修复] 更新资源路径:', href, '->', basePath + href.substring(1));
                    }
                });
            }
        }
    </script>
    
    <!-- 样式表 -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    
    <!-- 添加Firebase SDK 脚本 -->
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
    
    <!-- URL修复工具 - 处理推送通知URL问题 -->
    <script src="./js/url-fix.js?v=1.0.0"></script>
    
    <!-- 推送通知处理脚本 -->
    <script src="./js/notification-handler.js?v=2.0.1_20231121" id="notification-handler-script"></script>
    
    <!-- URL修复脚本 - 确保使用正确的域名 -->
    <script>
        (function() {
            // 等待notification-handler加载完成
            window.setTimeout(function() {
                try {
                    // 检查全局变量API_BASE_URL是否存在
                    if (typeof API_BASE_URL !== 'undefined') {
                        // 如果使用了错误的域名，则修复它
                        if (API_BASE_URL.includes('your-subdomain.workers.dev')) {
                            console.warn('发现错误的API_BASE_URL:', API_BASE_URL);
                            API_BASE_URL = 'https://ptvalert.pages.dev';
                            console.warn('已修复为:', API_BASE_URL);
                        }
                    }
                } catch (e) {
                    console.error('检查或修复API_BASE_URL失败:', e);
                }
            }, 100);
        })();
    </script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif;
            -webkit-tap-highlight-color: transparent; /* 移除移动端点击时的高亮 */
        }
        
        body {
            position: relative;
            width: 100%;
            height: 100vh;
            overflow: hidden;
            background-color: #1c1c1e;
            color: #fff;
        }
        
        #map {
            width: 100%;
            height: 100vh;
            z-index: 1;
        }
        
        /* 报告计数器弹窗样式 */
        .report-counter-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(50, 50, 54, 0.95);
            border-radius: 16px;
            padding: 20px;
            width: 90%;
            max-width: 350px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
            z-index: 3000;
            text-align: center;
            animation: popup-fade-in 0.3s ease-out;
            display: none;
        }
        
        @keyframes popup-fade-in {
            from { opacity: 0; transform: translate(-50%, -60%); }
            to { opacity: 1; transform: translate(-50%, -50%); }
        }
        
        .report-counter-popup h3 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #fff;
        }
        
        .report-counter-popup p {
            font-size: 16px;
            margin-bottom: 20px;
            color: #ccc;
        }
        
        .counter-value {
            font-size: 24px;
            font-weight: bold;
            color: #0071e3;
            margin: 0 5px;
        }
        
        .close-counter-popup {
            background-color: #0071e3;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .close-counter-popup:hover {
            background-color: #0077ed;
        }
        
        /* 地图控制样式 */
        .map-control {
            position: absolute;
            bottom: 30px;
            left: 0;
            right: 0;
            margin: 0 auto;
            width: 80%;
            max-width: 600px;
            z-index: 1000;
        }
        
        .add-report-btn {
            display: block;
            width: 100%;
            background-color: white;
            color: #333;
            padding: 16px;
            border-radius: 12px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
            text-decoration: none;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }
        
        .add-report-btn:hover {
            background-color: #f8f8f8;
        }
        
        /* 报告表单样式 */
        .report-form {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: #1c1c1e;
            padding: 20px;
            border-radius: 20px 20px 0 0;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.5);
            z-index: 1001;
            transform: translateY(100%);
            transition: transform 0.3s ease-in-out;
        }
        
        .report-form.active {
            transform: translateY(0);
        }
        
        .form-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .form-title {
            font-size: 20px;
            font-weight: bold;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-textarea {
            width: 100%;
            min-height: 100px;
            resize: vertical;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #444;
            background-color: #2c2c2e;
            color: #fff;
            font-size: 16px;
        }
        
        .submit-btn {
            width: 100%;
            background-color: #0071e3;
            color: white;
            border: none;
            padding: 14px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .submit-btn:hover {
            background-color: #0077ed;
        }
        
        /* 用户菜单样式 */
        .user-menu {
            position: fixed;
            top: 60px;
            right: 18px;
            z-index: 1001;
            background: #fff;
            color: #333;
            border-radius: 20px;
            padding: 10px 18px;
            font-size: 16px;
            font-weight: bold;
            box-shadow: 0 2px 12px rgba(0,0,0,0.18);
            border: 2px solid #0071e3;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            display: none; /* 默认隐藏，直到用户验证成功 */
        }
        
        .user-menu-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            margin-top: 10px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            width: 150px;
            display: none;
            z-index: 1002;
            overflow: hidden;
        }
        
        .user-menu-item {
            padding: 12px 15px;
            font-size: 14px;
            color: #333;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .user-menu-item:hover {
            background-color: #f5f5f5;
        }
        
        .user-menu-item.logout {
            color: #e74c3c;
            border-top: 1px solid #eee;
        }
        
        /* 移动设备适配 */
        @media (max-width: 768px) {
            .map-control {
                width: 90%;
                bottom: 20px;
            }
            
            .add-report-btn {
                padding: 14px;
                font-size: 18px;
            }
            
            .report-counter-popup {
                width: 95%;
                padding: 15px;
            }
        }

        /* 弹幕样式 */
        .danmaku-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 70%;
            pointer-events: none;
            z-index: 900;
            overflow: hidden;
        }
        
        .danmaku {
            position: absolute;
            white-space: nowrap;
            color: white;
            font-weight: bold;
            font-size: 20px;
            padding: 5px 12px;
            border-radius: 18px;
            background-color: rgba(0, 0, 0, 0.65);
            animation-name: danmaku-move;
            animation-timing-function: linear;
            animation-iteration-count: 1;
            user-select: none;
            z-index: 900;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.9);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
            letter-spacing: 0.5px;
        }
        
        @keyframes danmaku-move {
            from { transform: translateX(100vw); }
            to { transform: translateX(-100%); }
        }
        
        /* 翻译按钮样式 */
        .translate-btn {
            display: inline-block;
            margin-left: 8px;
            padding: 2px 5px;
            background-color: rgba(255, 255, 255, 0.2);
            color: #fff;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
        }
        
        .translate-btn:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }
        
        .translated-text {
            margin-top: 5px;
            padding: 5px;
            background-color: rgba(0, 113, 227, 0.1);
            border-radius: 4px;
            font-style: italic;
            color: #8cc5ff;
        }
        
        #userDisplayName {
            cursor: pointer;
        }

        /* 添加管理员样式 */
        .admin-badge {
            background-color: #ff3b30;
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            margin-left: 5px;
            font-weight: bold;
            display: inline-block;
            vertical-align: middle;
        }

        .admin-panel {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 3000;
            display: none;
            flex-direction: column;
            padding: 20px;
            overflow-y: auto;
        }

        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid #444;
            padding-bottom: 10px;
        }

        .admin-title {
            font-size: 24px;
            font-weight: bold;
            color: #fff;
        }

        .admin-close {
            background: none;
            border: none;
            color: #fff;
            font-size: 24px;
            cursor: pointer;
        }

        .admin-section {
            margin-bottom: 30px;
            padding: 15px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .admin-section-title {
            font-size: 18px;
            margin-bottom: 15px;
            color: #fff;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding-bottom: 5px;
        }

        .admin-button {
            background-color: #0071e3;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            margin-right: 10px;
            margin-bottom: 10px;
            cursor: pointer;
            font-weight: bold;
        }

        .admin-button.danger {
            background-color: #ff3b30;
        }

        .admin-button.warning {
            background-color: #ff9500;
        }

        .admin-button.success {
            background-color: #34c759;
        }

        .admin-input {
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            width: 100%;
            margin-bottom: 15px;
        }

        .admin-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .admin-table th, .admin-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .admin-table th {
            background-color: rgba(255, 255, 255, 0.1);
            font-weight: bold;
        }

        .admin-table tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .admin-announcement {
            position: fixed;
            top: 80px;
            left: 0;
            right: 0;
            margin: 0 auto;
            width: 90%;
            max-width: 800px;
            background-color: rgba(255, 149, 0, 0.9);
            color: white;
            border-radius: 10px;
            padding: 12px 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            z-index: 5003;
            display: flex;
            align-items: center;
            justify-content: space-between;
            animation: slide-down 0.5s ease-out;
        }

        .admin-announcement.error {
            background-color: rgba(255, 59, 48, 0.9);
        }

        .admin-announcement.info {
            background-color: rgba(0, 122, 255, 0.9);
        }

        @keyframes slide-down {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .admin-announcement-content {
            font-weight: bold;
            flex: 1;
        }

        .admin-announcement-close {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            margin-left: 15px;
        }

        .banned-user-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 59, 48, 0.95);
            z-index: 5000;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 30px;
            text-align: center;
        }

        .banned-user-title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 20px;
            color: white;
        }

        .banned-user-message {
            font-size: 18px;
            margin-bottom: 30px;
            color: white;
            max-width: 500px;
        }

        .banned-user-info {
            background-color: rgba(0, 0, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 30px;
            color: white;
        }

        .global-announcement-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #ff3b30;
            color: white;
            text-align: center;
            padding: 10px;
            font-weight: bold;
            z-index: 1999;
            font-size: 14px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        /* 快速描述弹窗样式 */
        .quick-desc-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(50, 50, 54, 0.95);
            border-radius: 16px;
            padding: 20px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
            z-index: 2000;
            animation: popup-fade-in 0.3s ease-out;
        }
    </style>
</head>
<body>
    <!-- 右上角语言切换按钮 -->
    <button id="langSwitchBtn" style="position:fixed;top:18px;right:18px;z-index:1001;background:rgba(255,255,255,0.8);color:#333;border-radius:20px;padding:6px 12px;font-size:14px;font-weight:bold;box-shadow:0 2px 12px rgba(0,0,0,0.18);border:2px solid #0071e3;cursor:pointer;display:flex;align-items:center;gap:6px;transition:background 0.2s,border 0.2s;">
      <span style="font-size:16px;">🌐</span>
      <span id="langSwitchText">EN</span>
    </button>
    
    <!-- 用户菜单 -->
    <div id="userMenu" class="user-menu">
      <span style="font-size:16px;">👤</span>
      <span id="userDisplayName" style="max-width:80px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">用户</span>
      <div class="user-menu-dropdown" id="userMenuDropdown">
        <div class="user-menu-item" id="profileMenuItem">个人资料</div>
        <div class="user-menu-item logout" id="logoutMenuItem">退出登录</div>
      </div>
    </div>
    
    <!-- 添加弹幕容器 -->
    <div class="danmaku-container" id="danmakuContainer"></div>
    
    <!-- 地图容器 -->
    <div id="map"></div>
    
    <!-- 地图控制 -->
    <div class="map-control">
        <div style="display:flex;gap:10px;margin-bottom:10px;">
            <a href="#" class="add-report-btn" id="addReportBtn">+ 添加报告</a>
            <a href="#" class="add-report-btn" id="quickAddBtn" style="background-color:#34c759;">+ 直接添加描述</a>
        </div>
        <span id="addReportTip" style="display:none;color:#ffb300;font-size:14px;margin-left:10px;">请在地图上点选位置</span>
    </div>
    
    <!-- 推送通知按钮 -->
    <div style="position:fixed;bottom:100px;right:20px;z-index:2000;">
        <button id="requestPushPermission" style="background-color:#0071e3;color:white;border:none;padding:10px 15px;border-radius:8px;font-weight:bold;box-shadow:0 2px 8px rgba(0,0,0,0.3);display:flex;align-items:center;gap:6px;">
            <span style="font-size:20px;">🔔</span>
            <span id="pushBtnText">启用推送通知</span>
        </button>
    </div>
    
    <!-- 报告计数器弹窗 -->
    <div class="report-counter-popup" id="reportCounterPopup">
        <h3 id="reportSuccessTitle">报告提交成功!</h3>
        <p id="reportCounterText">您已累计提交 <span class="counter-value" id="reportCountValue">1</span> 次报告</p>
        <button class="close-counter-popup" id="closeCounterPopup">确定</button>
    </div>
    
    <!-- 报告表单 -->
    <div class="report-form" id="reportForm" style="position:fixed;bottom:0;left:0;right:0;background-color:#1c1c1e;padding:20px;border-radius:20px 20px 0 0;box-shadow:0 -2px 10px rgba(0,0,0,0.5);z-index:1001;transform:translateY(100%);transition:transform 0.3s ease-in-out;">
        <div class="form-header">
            <h2 class="form-title" id="formTitle">新报告</h2>
            <button class="form-close" id="formClose" style="background:none;border:none;color:#fff;font-size:24px;cursor:pointer;">&times;</button>
        </div>
        
        <div class="form-group">
            <label class="form-label" id="photoLabel">照片</label>
            <div class="image-preview" style="width:100%;height:200px;border-radius:8px;background-color:#2c2c2e;display:flex;align-items:center;justify-content:center;margin-bottom:15px;overflow:hidden;position:relative;cursor:pointer;">
                <img src="" class="preview-img" id="previewImg" style="max-width:100%;max-height:100%;display:none;">
                <span class="image-placeholder" id="imagePlaceholder">点击添加照片</span>
                <input type="file" id="imageInput" accept="image/*" style="position:absolute;left:0;top:0;width:100%;height:100%;opacity:0;cursor:pointer;z-index:2;">
            </div>
        </div>
        
        <div class="form-group">
            <label class="form-label" id="descLabel">描述</label>
            <textarea class="form-textarea" id="descriptionInput" placeholder="请描述您看到的情况..." style="width:100%;padding:12px;border-radius:8px;border:1px solid #444;background-color:#2c2c2e;color:#fff;font-size:16px;min-height:100px;resize:vertical;"></textarea>
            <div style="display:flex;justify-content:space-between;align-items:center;margin-top:8px;">
                <button id="geocodeLocationBtn" style="padding:6px 12px;background-color:#0077cc;color:white;border:none;border-radius:6px;font-size:14px;cursor:pointer;">根据描述定位</button>
                <button id="currentLocationBtn" style="padding:6px 12px;margin-left:8px;background-color:#34c759;color:white;border:none;border-radius:6px;font-size:14px;cursor:pointer;">使用当前位置</button>
                <span style="font-size:12px;color:#999;margin-left:8px;flex:1;text-align:right;">提示: 输入地点描述后点击，或使用Ctrl+Enter快捷键</span>
            </div>
            <div id="geocodeStatus" style="margin-top:5px;font-size:14px;color:#ffcc00;display:none;"></div>
        </div>
        
        <div style="display:flex;gap:10px;margin-top:15px;">
            <button class="submit-btn" id="submitReport" style="flex:1;background-color:#0071e3;color:white;border:none;padding:14px;border-radius:8px;font-size:16px;font-weight:bold;cursor:pointer;">确定</button>
            <button class="reset-location-btn" id="resetLocationBtn" style="flex:1;background-color:#ffc107;color:#000;border:none;padding:14px;border-radius:8px;font-size:16px;font-weight:bold;cursor:pointer;">重新选点</button>
            <button class="cancel-btn" id="cancelReport" style="flex:1;background-color:#3a3a3c;color:white;border:none;padding:14px;border-radius:8px;font-size:16px;font-weight:bold;cursor:pointer;">取消</button>
        </div>
    </div>
    
    <!-- Firebase初始化 -->
    <script>
        // Firebase配置
        const firebaseConfig = {
            apiKey: "AIzaSyD5qFJl2MNiYKCjrQo8iBST5U4LkhkXYi8",
            authDomain: "ptvalert-19ea4.firebaseapp.com",
            databaseURL: "https://ptvalert-19ea4-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: "ptvalert-19ea4",
            storageBucket: "ptvalert-19ea4.appspot.com",
            messagingSenderId: "590126951854",
            appId: "1:590126951854:web:4cbc14144b0a395dc42c3f"
        };
        
        // 增加同步选项，设置为true以确保数据同步
        const syncToCloudflare = true; // 即使使用Firebase也同步到Cloudflare
        
        // 确定当前使用的存储系统
        const useCloudflare = true; // 设置为true使用Cloudflare, false使用Firebase
        
        // 定义Cloudflare API配置
        const cloudflareConfig = {
            apiUrl: 'https://ptvalert.pages.dev', // 你的实际Cloudflare Worker URL
            dataEndpoint: '/api/reports',
            syncEndpoint: '/api/sync-from-firebase',
            notificationEndpoint: '/api/send-notification',
            apiKey: '51DZw4un3KKP91kKGEhSMRlv4rT9563sjSHiLuHZc2fi1TxkfwFXH52ZVVhOTzwv5jcJPfFabquIS49Et0ucJXixEr7RJV9dQ65nQNe1mt79wOyxHR8DoHFjFS0CRZoO4q2fw3x1A1FdwPtwbfmkuhYa0okUTSxVk4aMTu4hVjnNYv5y1W4e9fwwsjPLgli3MOzNQ1VkgB8lRleb5dOYpAGGW2TcnTGa9ruR5dzIzjw6JsjA2UPd2rvy1rLAqqHm', // 添加API密钥用于认证
            useRealApi: true // 设置为true使用真实API，false使用模拟响应
        };
        
        /*
         * 要使用真实的Cloudflare通信和推送通知，你需要:
         * 1. 在Cloudflare Workers上部署适当的API端点
         * 2. 设置cloudflareConfig.apiUrl为你的Worker URL
         * 3. 生成并配置安全的API密钥
         * 4. 确保cloudflareConfig.useRealApi设置为true
         * 5. 生成并配置VAPID密钥用于Web Push API
         * 6. 在notification-handler.js中更新vapidPublicKey
         */
        
        // 初始化Firebase
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }
        
        const auth = firebase.auth();
        const database = firebase.database();
        
        // 获取数据库引用
        const reportsRef = database.ref('reports');
        const userReportsCountRef = database.ref('userReportsCount');
        
        // 管理员相关数据库引用
        const adminUsersRef = database.ref('adminUsers');
        const bannedUsersRef = database.ref('bannedUsers');
        const announcementsRef = database.ref('announcements');
        
        // 当前用户管理员状态
        let isCurrentUserAdmin = false;
        
        // 弹幕功能
        const danmakuContainer = document.getElementById('danmakuContainer');
        const danmakuQueue = [];
        const activeDanmakus = [];
        let danmakuRunning = false;
        
        // 语言设置
        let currentLang = 'zh';
        const i18n = {
            zh: {
                reportSuccess: '报告提交成功!',
                reportCounterText: '您已累计提交 {count} 次报告',
                closeButton: '确定',
                addReport: '+ 添加报告',
                newReport: '新报告',
                photo: '照片',
                imagePlaceholder: '点击添加照片',
                description: '描述',
                descriptionPlaceholder: '请描述您看到的情况...',
                submit: '确定',
                resetLocation: '重新选点',
                cancel: '取消',
                selectLocation: '请在地图上点选位置',
                reportDetails: '报告详情',
                noDescription: '无描述',
                selecting: '正在选点...',
                translate: '🌐',
                translating: '翻译中...',
                translation: '翻译: ',
                refreshTramInfo: '刷新电车信息',
                addComment: '添加评论',
                deleteReport: '删除报告',
                commentPlaceholder: '写下您的评论...',
                submitComment: '发送',
                cancelComment: '取消',
                confirmDelete: '确定要删除这条报告吗？',
                yes: '是',
                no: '否',
                profile: '个人资料',
                logout: '退出登录',
                comments: '评论',
                noComments: '暂无评论',
                geocodeLocation: '根据描述定位',
                geocoding: '正在定位...',
                geocodeSuccess: '定位成功!',
                geocodeError: '定位失败，请尝试更详细的描述或手动选点',
                useCurrentLocation: '使用当前位置',
                gettingLocation: '获取位置中...',
                locationSuccess: '已获取当前位置',
                locationError: '无法获取位置，请检查位置权限',
                // 快速添加描述功能
                quickAddDesc: '+ 直接添加描述',
                quickAddTitle: '快速添加描述',
                quickDescPlaceholder: '请输入事件描述...',
                addToMap: '添加到地图',
                addedMarkerFromDesc: '已根据"{desc}"添加标记',
                usePresetLocation: '已从预设位置中找到匹配',
                // 管理员相关翻译
                adminPanel: '管理员控制面板',
                adminBadge: '管理员',
                announcements: '发布全局公告',
                announcementContent: '公告内容',
                announcementType: '公告类型',
                publishTempAnnouncement: '发布临时公告',
                publishGlobalAnnouncement: '发布全局顶部公告',
                clearGlobalAnnouncement: '清除全局公告',
                reportsManagement: '报告管理',
                filterCondition: '过滤条件',
                id: 'ID',
                time: '时间',
                user: '用户',
                actions: '操作',
                refresh: '刷新列表',
                userManagement: '用户管理',
                userIdOrEmail: '用户ID或邮箱',
                banUser: '封禁用户',
                unbanUser: '解除封禁',
                promoteAdmin: '提升为管理员',
                removeAdmin: '移除管理员权限',
                userName: '用户名',
                status: '状态',
                role: '角色',
                banned: '已封禁',
                active: '正常',
                admin: '管理员',
                normalUser: '普通用户',
                warning: '警告 (黄色)',
                error: '紧急 (红色)',
                info: '信息 (蓝色)',
                userBanned: '账号已被封禁',
                banReason: '封禁原因',
                contactAdmin: '如有疑问请联系管理员',
                deleteConfirm: '确认删除',
                banConfirm: '确认封禁',
                adminControls: '管理选项'
            },
            en: {
                reportSuccess: 'Report submitted successfully!',
                reportCounterText: 'You have submitted {count} reports in total',
                closeButton: 'OK',
                addReport: '+ Add Report',
                newReport: 'New Report',
                photo: 'Photo',
                imagePlaceholder: 'Click to add photo',
                description: 'Description',
                descriptionPlaceholder: 'Describe what you see...',
                submit: 'Submit',
                resetLocation: 'Reset Location',
                cancel: 'Cancel',
                selectLocation: 'Please select a location on the map',
                reportDetails: 'Report Details',
                noDescription: 'No description',
                selecting: 'Selecting...',
                translate: '🌐',
                translating: 'Translating...',
                translation: 'Translation: ',
                refreshTramInfo: 'Refresh Tram Info',
                addComment: 'Add Comment',
                deleteReport: 'Delete Report',
                commentPlaceholder: 'Write your comment...',
                submitComment: 'Send',
                cancelComment: 'Cancel',
                confirmDelete: 'Are you sure you want to delete this report?',
                yes: 'Yes',
                no: 'No',
                profile: 'Profile',
                logout: 'Logout',
                comments: 'Comments',
                noComments: 'No comments yet',
                geocodeLocation: 'Find Location from Description',
                geocoding: 'Finding location...',
                geocodeSuccess: 'Location found!',
                geocodeError: 'Location not found, please try a more specific description or select manually',
                useCurrentLocation: 'Use Current Location',
                gettingLocation: 'Getting location...',
                locationSuccess: 'Current location obtained',
                locationError: 'Could not get location, please check location permissions',
                // Quick add description feature
                quickAddDesc: '+ Direct Description',
                quickAddTitle: 'Add Description Directly',
                quickDescPlaceholder: 'Please enter event description...',
                addToMap: 'Add to Map',
                addedMarkerFromDesc: 'Added marker based on "{desc}"',
                usePresetLocation: 'Match found in preset locations',
                // Admin related translations
                adminPanel: 'Admin Control Panel',
                adminBadge: 'ADMIN',
                announcements: 'Publish Global Announcement',
                announcementContent: 'Announcement Content',
                announcementType: 'Announcement Type',
                publishTempAnnouncement: 'Publish Temporary Announcement',
                publishGlobalAnnouncement: 'Publish Global Banner Announcement',
                clearGlobalAnnouncement: 'Clear Global Announcement',
                reportsManagement: 'Reports Management',
                filterCondition: 'Filter',
                id: 'ID',
                time: 'Time',
                user: 'User',
                actions: 'Actions',
                refresh: 'Refresh List',
                userManagement: 'User Management',
                userIdOrEmail: 'User ID or Email',
                banUser: 'Ban User',
                unbanUser: 'Unban User',
                promoteAdmin: 'Promote to Admin',
                removeAdmin: 'Remove Admin',
                userName: 'Username',
                status: 'Status',
                role: 'Role',
                banned: 'Banned',
                active: 'Active',
                admin: 'Admin',
                normalUser: 'Normal User',
                warning: 'Warning (Yellow)',
                error: 'Emergency (Red)',
                info: 'Information (Blue)',
                userBanned: 'Account Banned',
                banReason: 'Ban Reason',
                contactAdmin: 'Please contact administrators if you have questions',
                deleteConfirm: 'Confirm Delete',
                banConfirm: 'Confirm Ban',
                adminControls: 'Admin Options'
            }
        };
        
        // 当前用户ID
        // let currentUserId = ''; // Temporarily commented out for debugging
        // 用户报告计数
        let userReportCount = 0;
        // 用于存储选中的位置
        let selectedLocation = null;
        // 选择位置模式
        let isSelectingLocation = false;
        // 地图标记相关
        let selectionMarker = null;
        let selectionCircle = null;
        
        // 墨尔本电车公告数据
        const tramAnnouncements = [
            "Route 1: Minor delays due to track maintenance between Stop 13 and Federation Square.",
            "Route 5: Service running smoothly with normal frequency.",
            "Route 11: Additional services added during peak hours due to increased demand.",
            "Route 16: Temporary stop closure at Melbourne University until further notice.",
            "Route 19: Normal service has resumed after earlier disruption.",
            "Route 48: Delays expected near Bridge Road due to road works.",
            "Route 57: Service changes this weekend for scheduled maintenance.",
            "Route 58: Increased frequency during AFL matches at MCG.",
            "Route 64: Minor delays expected due to traffic congestion in CBD area.",
            "Route 70: Service diverted between stops 10-15 due to street festival.",
            "Route 75: Service operating normally with good frequency.",
            "Route 86: Temporary stop relocation at Bourke Street due to construction.",
            "Route 96: Express service available during peak hours.",
            "All routes: Free tram zone remains in effect in CBD area.",
            "Safety reminder: Please hold handrails when tram is in motion."
        ];
        
        // 墨尔本电车公告中文版
        const tramAnnouncementsCN = [
            "1号线：13站和联邦广场之间的轨道维修导致轻微延误。",
            "5号线：服务平稳运行，频率正常。",
            "11号线：因需求增加，高峰时段增加了服务。",
            "16号线：墨尔本大学站临时关闭，恢复时间待定。",
            "19号线：早先的中断后，正常服务已恢复。",
            "48号线：由于道路工程，Bridge Road附近预计会有延误。",
            "57号线：本周末计划维护，服务有变更。",
            "58号线：MCG举行AFL比赛期间，增加频率。",
            "64号线：由于市中心区域交通拥堵，预计会有轻微延误。",
            "70号线：因街头节日活动，10-15站之间服务改道。",
            "75号线：服务正常运行，频率良好。",
            "86号线：由于建筑工程，Bourke Street站临时迁移。",
            "96号线：高峰时段提供快速服务。",
            "所有线路：市中心区域免费电车区仍然有效。",
            "安全提醒：电车行驶时请扶好扶手。"
        ];
        
        // 验证用户登录状态
        function checkAuthState() {
            // 首先检查localStorage
            const isGuestUserLS = localStorage.getItem('isGuestUser') === 'true';
            const userLoggedInLS = localStorage.getItem('userLoggedIn') === 'true';
            const guestIdLS = localStorage.getItem('guestId');
            
            // 如果localStorage显示用户未登录，不再进行后续检查
            if (!userLoggedInLS) {
                console.log('localStorage显示用户未登录，重定向到登录页...');
                window.location.href = 'login.html';
                return;
            }
            
            // 确定是否为游客模式
            const isGuestUser = isGuestUserLS;
            const userLoggedIn = userLoggedInLS;
            const guestId = guestIdLS || 'guest_user';
            
            if (isGuestUser && userLoggedIn) {
                console.log('使用游客模式...');
                console.log('游客ID:', guestId);
                
                // 设置当前用户ID为游客ID
                currentUserId = guestId;
                
                // 显示游客模式菜单
                const userMenu = document.getElementById('userMenu');
                const userDisplayName = document.getElementById('userDisplayName');
                // 根据当前语言设置显示文本
                userDisplayName.textContent = currentLang === 'zh' ? '游客' : 'Guest';
                userMenu.style.display = 'flex';
                
                // 加载用户报告计数
                loadUserReportCount(currentUserId);
                
                // 游客不能是管理员
                isCurrentUserAdmin = false;
                
                return; // 游客模式登录成功，不需要进一步检查
            }
            
            // 如果不是游客模式，检查Firebase认证
            auth.onAuthStateChanged(function(user) {
                if (user) {
                    // 用户已通过Firebase登录
                    console.log('用户已登录Firebase:', user.uid, user.isAnonymous ? '(匿名用户)' : '');
                    // 更新当前用户ID
                    currentUserId = user.uid;
                    
                    // 加载用户报告计数
                    loadUserReportCount(currentUserId);
                    
                    // 检查用户是否是管理员
                    checkAdminStatus(currentUserId);
                    
                    // 检查用户是否被封禁
                    checkUserBanStatus(currentUserId);
                    
                    // 更新用户菜单
                    updateUserMenu(user);
                } else if (userLoggedIn) {
                    // 用户通过localStorage登录但Firebase不识别
                    console.log('用户已通过localStorage登录');
                    const userEmail = localStorage.getItem('userEmail') || (currentLang === 'zh' ? '用户' : 'User');
                    
                    // 使用email作为用户ID
                    currentUserId = userEmail.replace(/[^a-zA-Z0-9]/g, '_');
                    
                    // 加载用户报告计数
                    loadUserReportCount(currentUserId);
                    
                    // 检查用户是否是管理员
                    checkAdminStatus(currentUserId);
                    
                    // 检查用户是否被封禁
                    checkUserBanStatus(currentUserId);
                    
                    // 更新用户菜单
                    const userMenu = document.getElementById('userMenu');
                    const userDisplayName = document.getElementById('userDisplayName');
                    userDisplayName.textContent = userEmail.split('@')[0];
                    userMenu.style.display = 'flex';
                } else {
                    // 未登录，重定向到登录页
                    console.log('用户未登录，重定向到登录页...');
                    window.location.href = 'login.html';
                }
            });
        }
        
        // 检查用户是否是管理员
        function checkAdminStatus(userId) {
            adminUsersRef.child(userId).once('value')
                .then((snapshot) => {
                    isCurrentUserAdmin = snapshot.exists() && snapshot.val() === true;
                    console.log('用户管理员状态:', isCurrentUserAdmin);
                    
                    // 如果是管理员，更新用户菜单
                    if (isCurrentUserAdmin) {
                        const userDisplayName = document.getElementById('userDisplayName');
                        // 添加管理员标签
                        if (!document.getElementById('adminBadge')) {
                            const adminBadge = document.createElement('span');
                            adminBadge.id = 'adminBadge';
                            adminBadge.className = 'admin-badge';
                            adminBadge.textContent = i18n[currentLang].adminBadge;
                            userDisplayName.parentNode.insertBefore(adminBadge, userDisplayName.nextSibling);
                        }
                        
                        // 更新用户菜单添加管理员面板选项
                        updateAdminMenuOptions();
                    }
                })
                .catch((error) => {
                    console.error('检查管理员状态出错:', error);
                    isCurrentUserAdmin = false;
                });
        }
        
        // 更新管理员菜单选项
        function updateAdminMenuOptions() {
            const userMenuDropdown = document.getElementById('userMenuDropdown');
            
            // 检查是否已有管理员选项
            if (!document.getElementById('adminPanelMenuItem')) {
                // 创建管理员面板菜单项
                const adminMenuItem = document.createElement('div');
                adminMenuItem.id = 'adminPanelMenuItem';
                adminMenuItem.className = 'user-menu-item';
                adminMenuItem.textContent = i18n[currentLang].adminPanel;
                adminMenuItem.style.fontWeight = 'bold';
                adminMenuItem.style.color = '#ff3b30';
                
                // 插入到第一个位置
                if (userMenuDropdown.firstChild) {
                    userMenuDropdown.insertBefore(adminMenuItem, userMenuDropdown.firstChild);
                } else {
                    userMenuDropdown.appendChild(adminMenuItem);
                }
                
                // 添加点击事件
                adminMenuItem.addEventListener('click', function() {
                    openAdminPanel();
                    userMenuDropdown.style.display = 'none';
                });
            }
        }
        
        // 检查用户是否被封禁
        function checkUserBanStatus(userId) {
            bannedUsersRef.child(userId).once('value')
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        const banInfo = snapshot.val();
                        console.log('用户已被封禁:', banInfo);
                        
                        // 显示封禁界面
                        showBannedUserScreen(banInfo);
                    }
                })
                .catch((error) => {
                    console.error('检查用户封禁状态出错:', error);
                });
        }
        
        // 显示用户被封禁界面
        function showBannedUserScreen(banInfo) {
            // 创建封禁界面
            const bannedOverlay = document.createElement('div');
            bannedOverlay.className = 'banned-user-overlay';
            
            const banTitle = document.createElement('h2');
            banTitle.className = 'banned-user-title';
            banTitle.textContent = i18n[currentLang].userBanned;
            bannedOverlay.appendChild(banTitle);
            
            const banMessage = document.createElement('p');
            banMessage.className = 'banned-user-message';
            banMessage.textContent = banInfo.reason || i18n[currentLang].banReason;
            bannedOverlay.appendChild(banMessage);
            
            const banInfoElement = document.createElement('div');
            banInfoElement.className = 'banned-user-info';
            banInfoElement.innerHTML = `<p>${i18n[currentLang].contactAdmin}</p>`;
            if (banInfo.bannedBy) {
                banInfoElement.innerHTML += `<p>管理员: ${banInfo.bannedBy}</p>`;
            }
            if (banInfo.banTime) {
                banInfoElement.innerHTML += `<p>封禁时间: ${new Date(banInfo.banTime).toLocaleString()}</p>`;
            }
            bannedOverlay.appendChild(banInfoElement);
            
            // 添加登出按钮
            const logoutBtn = document.createElement('button');
            logoutBtn.className = 'admin-button danger';
            logoutBtn.textContent = i18n[currentLang].logout;
            logoutBtn.addEventListener('click', function() {
                // 清除登录状态
                localStorage.removeItem('userLoggedIn');
                localStorage.removeItem('userEmail');
                localStorage.removeItem('isGuestUser');
                localStorage.removeItem('guestId');
                
                // Firebase登出
                if (auth) {
                    auth.signOut().then(() => {
                        console.log('用户已登出Firebase');
                    }).catch((error) => {
                        console.error('Firebase登出错误:', error);
                    });
                }
                
                // 重定向到登录页面
                window.location.href = 'login.html?logout=1';
            });
            bannedOverlay.appendChild(logoutBtn);
            
            // 添加到body
            document.body.appendChild(bannedOverlay);
        }
        
        // 加载用户报告计数
        function loadUserReportCount(userId) {
            if (!userId) return;
            
            userReportsCountRef.child(userId).once('value')
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        userReportCount = snapshot.val();
                        console.log(`用户${userId}的报告计数为:`, userReportCount);
                    } else {
                        userReportCount = 0;
                        console.log(`用户${userId}没有报告记录，初始化计数为0`);
                    }
                })
                .catch((error) => {
                    console.error('加载用户报告计数出错:', error);
                    userReportCount = 0;
                });
        }
        
        // 更新用户报告计数
        function incrementUserReportCount() {
            if (!currentUserId) return;
            
            userReportCount++;
            
            userReportsCountRef.child(currentUserId).set(userReportCount)
                .then(() => {
                    console.log(`更新用户${currentUserId}的报告计数为:`, userReportCount);
                    // 显示报告计数器弹窗
                    showReportCounterPopup();
                })
                .catch((error) => {
                    console.error('更新用户报告计数出错:', error);
                });
        }
        
        // 显示报告计数器弹窗
        function showReportCounterPopup() {
            const popup = document.getElementById('reportCounterPopup');
            const countValueEl = document.getElementById('reportCountValue');
            
            // 确保先获取最新的用户报告计数
            userReportsCountRef.child(currentUserId).once('value')
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        userReportCount = snapshot.val();
                    }
                    
                    // 更新弹窗文本
                    document.getElementById('reportSuccessTitle').textContent = i18n[currentLang].reportSuccess;
                    document.getElementById('reportCounterText').innerHTML = i18n[currentLang].reportCounterText.replace('{count}', '<span class="counter-value" id="reportCountValue">' + userReportCount + '</span>');
                    document.getElementById('closeCounterPopup').textContent = i18n[currentLang].closeButton;
                    
                    // 设置计数值
                    countValueEl.textContent = userReportCount;
                    
                    // 显示弹窗
                    popup.style.display = 'block';
                })
                .catch((error) => {
                    console.error('获取用户报告计数出错:', error);
                    popup.style.display = 'block';
                });
        }
        
        // 关闭报告计数器弹窗
        function closeReportCounterPopup() {
            const popup = document.getElementById('reportCounterPopup');
            popup.style.display = 'none';
        }
        
        // 添加新报告
        function addNewReport(description, image, lat, lng) {
            if (!currentUserId) {
                console.error("未找到用户ID，无法提交报告");
                return;
            }
            
            const newReport = {
                id: Date.now(), // 使用时间戳作为ID
                lat: lat,
                lng: lng,
                description: description,
                time: new Date().toISOString(),
                image: image,
                emoji: "🐶", // 默认emoji
                comments: [],
                userId: currentUserId,
                userName: document.getElementById('userDisplayName').textContent || (currentLang === 'zh' ? '用户' : 'User'),
                originalDescription: description // 保存原始描述
            };
            
            // 根据描述选择表情
            if (description && (description.toLowerCase().includes('dog') || description.toLowerCase().includes('狗'))) {
                newReport.emoji = "🐶";
            } else if (description && (description.toLowerCase().includes('traffic') || description.toLowerCase().includes('交通'))) {
                newReport.emoji = "🚗";
            } else if (description && (description.toLowerCase().includes('food') || description.toLowerCase().includes('餐'))) {
                newReport.emoji = "🍔";
            } else if (description && (description.toLowerCase().includes('event') || description.toLowerCase().includes('活动'))) {
                newReport.emoji = "🎪";
            }
            
            // 保存到Firebase
            reportsRef.child(newReport.id.toString()).set(newReport)
                .then(() => {
                    console.log("Report successfully saved to Firebase", newReport);
                    // 关闭报告表单
                    closeReportForm();
                    // 重置表单
                    resetReportForm();
                    
                    // 移除临时选点标记（如果有）
                    if (selectionMarker) {
                        selectionMarker.setMap(null);
                        selectionMarker = null;
                    }
                    
                    // 增加用户报告计数
                    incrementUserReportCount();
                })
                .catch((error) => {
                    console.error("Error saving report to Firebase:", error);
                    alert("提交报告失败: " + error.message);
                });
        }
        
        // 打开报告表单
        function openReportForm() {
            const reportForm = document.getElementById('reportForm');
            reportForm.classList.add('active');
            reportForm.style.transform = 'translateY(0)';
        }
        
        // 关闭报告表单
        function closeReportForm() {
            document.getElementById('reportForm').style.transform = 'translateY(100%)';
            document.getElementById('descriptionInput').value = '';
            document.getElementById('imageInput').value = '';
            document.getElementById('previewImg').style.display = 'none';
            document.getElementById('imagePlaceholder').style.display = 'block';
            
            // 确保状态提示也被隐藏
            document.getElementById('geocodeStatus').style.display = 'none';
            
            // 如果存在选点标记，在表单关闭时不要清除，等到报告提交或取消选点时再清除
        }
        
        // 重置报告表单
        function resetReportForm() {
            document.getElementById('descriptionInput').value = '';
            document.getElementById('previewImg').style.display = 'none';
            document.getElementById('imagePlaceholder').style.display = 'block';
            document.getElementById('imageInput').value = '';
        }
        
        // 更新用户菜单显示
        function updateUserMenu(user) {
            const userMenu = document.getElementById('userMenu');
            const userDisplayName = document.getElementById('userDisplayName');
            const profileMenuItem = document.getElementById('profileMenuItem');
            const logoutMenuItem = document.getElementById('logoutMenuItem');
            
            if (user) {
                // 优先使用用户名，如果没有则使用邮箱
                const displayName = user.displayName || user.email || (currentLang === 'zh' ? '用户' : 'User');
                userDisplayName.textContent = displayName.split('@')[0]; // 只显示@前面的部分
                userMenu.style.display = 'flex';
                
                // 更新菜单项文本
                profileMenuItem.textContent = i18n[currentLang].profile;
                logoutMenuItem.textContent = i18n[currentLang].logout;
            } else {
                userMenu.style.display = 'none';
            }
        }
        
        // 处理地图点击事件 - 选择报告位置
        function handleMapClick(latLng) {
            if (!isSelectingLocation) return;
            
            selectedLocation = {
                lat: latLng.lat,
                lng: latLng.lng
            };
            
            // 添加选点标记（传入false表示这是手动选点）
            addSelectionMarker(selectedLocation, false);
            
            // 重置选择模式
            isSelectingLocation = false;
            document.getElementById('addReportTip').style.display = 'none';
            document.getElementById('addReportBtn').textContent = i18n[currentLang].addReport;
            document.body.style.cursor = '';
            
            // 打开报告表单
            openReportForm();
        }
        
        // 地图变量
        var map;
        var markers = [];
        
        // 墨尔本中心坐标
        const MELBOURNE_CENTER = { lat: -37.8136, lng: 144.9631 };
        
        // 初始化地图
        function initMap() {
            console.log("initMap被调用，初始化地图...");
            
            // 创建地图
            try {
                map = new google.maps.Map(document.getElementById("map"), {
                    center: MELBOURNE_CENTER,
                    zoom: 13,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });
                
                // 添加地图点击事件
                map.addListener("click", (event) => {
                    if (isSelectingLocation) {
                        // 添加临时选点标记动画效果
                        addSelectionMarker({
                            lat: event.latLng.lat(),
                            lng: event.latLng.lng()
                        });
                        
                        handleMapClick({
                            lat: event.latLng.lat(),
                            lng: event.latLng.lng()
                        });
                    }
                });
                
                // 确保关键变量已正确设置
                console.log("存储系统配置检查:");
                console.log("- useCloudflare =", useCloudflare);
                console.log("- syncToCloudflare =", syncToCloudflare);
                console.log("- cloudflareConfig =", cloudflareConfig);
                
                // 加载报告
                console.log("尝试加载报告数据...");
                try {
                    if (useCloudflare) {
                        console.log("从Cloudflare加载标记数据");
                        // 首先尝试从Cloudflare加载
                        loadReportsFromCloudflare();
                        
                        // 如果10秒后标记数量为0，尝试从Firebase加载
                        setTimeout(() => {
                            if (markers.length === 0) {
                                console.log("Cloudflare加载超时或无结果，尝试从Firebase加载数据...");
                                loadReportsDirectlyFromFirebase();
                            }
                        }, 10000);
                    } else {
                        console.log("从Firebase加载标记数据");
                        loadReportsFromFirebase();
                    }
                } catch (dataError) {
                    console.error("加载报告数据时出错:", dataError);
                    
                    // 错误处理 - 尝试回退方式加载
                    setTimeout(() => {
                        try {
                            console.log("使用回退方式加载报告数据...");
                            loadReportsDirectlyFromFirebase();
                        } catch (fallbackError) {
                            console.error("回退加载也失败:", fallbackError);
                            sendDanmaku(currentLang === 'zh' ? 
                                '无法加载报告数据，请刷新页面重试' : 
                                'Failed to load report data, please refresh'
                            );
                        }
                    }, 2000);
                }
                
                console.log("地图初始化完成!");
            } catch (error) {
                console.error("地图初始化失败:", error);
                // 显示错误给用户
                sendDanmaku(currentLang === 'zh' ? 
                    '地图初始化失败，请刷新页面' : 
                    'Map initialization failed, please refresh'
                );
            }
        }
        
        // 添加formatTimeAgo函数的定义，放在脚本的早期位置
        // (在任何地图相关函数之前)
        function formatTimeAgo(date) {
            const now = new Date();
            const diffMs = now - date;
            const diffSec = Math.floor(diffMs / 1000);
            const diffMin = Math.floor(diffSec / 60);
            const diffHour = Math.floor(diffMin / 60);
            
            if (diffMin < 1) {
                return '刚刚';
            } else if (diffMin < 60) {
                return `${diffMin}分钟前`;
            } else if (diffHour < 24) {
                return `${diffHour}小时前`;
            } else {
                return date.toLocaleString('zh-CN', {
                    month: 'numeric',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
        }
        
        // 更新标记创建代码，使用传统Marker
        function addSelectionMarker(location, isFromGeocoding = false) {
            try {
                // 移除旧标记（如果有）
                if (selectionMarker) {
                    selectionMarker.setMap(null);
                }
                
                // 创建标记图标
                const markerIcon = {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(
                        `<svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" viewBox="0 0 42 42">
                            <circle cx="21" cy="21" r="20" fill="white" opacity="0.95"/>
                            <text x="21" y="29" font-size="24" text-anchor="middle" fill="${isFromGeocoding ? '#0077cc' : '#ff3b30'}">${isFromGeocoding ? '🔍' : '📍'}</text>
                        </svg>`
                    ),
                    scaledSize: new google.maps.Size(42, 42),
                    anchor: new google.maps.Point(21, 21)
                };
                
                // 创建传统Marker
                selectionMarker = new google.maps.Marker({
                    position: location,
                    map: map,
                    icon: markerIcon,
                    zIndex: 1000
                });
                
                // 在标记周围添加一个圆圈来增强可见性
                if (!selectionCircle) {
                    selectionCircle = new google.maps.Circle({
                        map: map,
                        center: location,
                        radius: 50, // 50米半径
                        strokeColor: isFromGeocoding ? "#0077cc" : "#ff3b30",
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: isFromGeocoding ? "#0077cc" : "#ff3b30",
                        fillOpacity: 0.1,
                        zIndex: 999
                    });
                } else {
                    selectionCircle.setCenter(location);
                    selectionCircle.setMap(map);
                    selectionCircle.setOptions({
                        strokeColor: isFromGeocoding ? "#0077cc" : "#ff3b30",
                        fillColor: isFromGeocoding ? "#0077cc" : "#ff3b30"
                    });
                }
                
                // 移动地图到标记位置
                map.panTo(location);
            } catch (error) {
                console.error("添加选择标记时出错:", error);
                // 显示错误消息给用户
                sendDanmaku(currentLang === 'zh' ? 
                    '添加标记失败，请重试' : 
                    'Failed to add marker, please try again'
                );
            }
        }
        
        // 从Firebase加载报告数据
        function loadReportsFromFirebase() {
            console.log("开始从Firebase直接加载数据...");
            
            // 如果使用Cloudflare Workers，从那里获取数据
            if (useCloudflare) {
                console.log("配置为使用Cloudflare，转向loadReportsFromCloudflare()");
                loadReportsFromCloudflare();
                return;
            }
            
            // 清除现有标记
            markers.forEach(marker => {
                marker.setMap(null);
            });
            markers = [];
            
            console.log("尝试连接Firebase数据库...");
            
            // 添加重试和错误恢复逻辑
            let retryCount = 0;
            const maxRetries = 3;
            const retryDelay = 2000; // 2秒延迟
            
            function attemptLoadReports() {
                // 添加超时处理
                let timeoutId = setTimeout(() => {
                    console.error(`Firebase数据加载超时(15秒)，当前尝试次数: ${retryCount+1}/${maxRetries}`);
                    if (retryCount < maxRetries - 1) {
                        retryCount++;
                        sendDanmaku(`Firebase加载超时，第${retryCount}次重试中...`);
                        setTimeout(attemptLoadReports, retryDelay);
                    } else {
                        sendDanmaku('Firebase连接超时，请检查网络或刷新页面');
                        // 尝试从localStorage恢复缓存的数据
                        tryLoadCachedReports();
                    }
                }, 15000);
                
                try {
                    // 使用once而不是on，避免持续监听
                    // 添加查询限制，只获取最近3小时的数据
                    const now = new Date();
                    const threeHoursAgo = new Date(now.getTime() - (3 * 60 * 60 * 1000));
                    const cutoffTime = threeHoursAgo.toISOString();
                    
                    // 优化查询以减少数据传输量
                    reportsRef.orderByChild('time').startAt(cutoffTime)
                        .once('value')
                        .then(snapshot => {
                            clearTimeout(timeoutId); // 清除超时
                            
                            console.log("Firebase数据库响应:", snapshot.exists() ? "有数据" : "无数据");
                            
                            if (snapshot.exists()) {
                                const reports = [];
                                let markersAdded = 0;
                                
                                snapshot.forEach(childSnapshot => {
                                    const report = childSnapshot.val();
                                    if (report && report.id) {
                                        reports.push(report);
                                        const markerAdded = addReportMarker(report);
                                        if (markerAdded) markersAdded++;
                                        
                                        // 缓存报告以便离线使用
                                        cacheReportLocally(report);
                                    }
                                });
                                
                                console.log(`成功从Firebase加载了${reports.length}个报告，显示了${markersAdded}个标记`);
                                sendDanmaku(`已从Firebase加载${markersAdded}个报告`);
                                
                                // 如果没有加载到报告，显示提示
                                if (markersAdded === 0) {
                                    console.log("没有显示符合条件的报告");
                                    sendDanmaku('没有最近的报告数据');
                                }
                            } else {
                                console.log("Firebase数据库中没有报告数据");
                                sendDanmaku('Firebase中没有数据');
                            }
                        })
                        .catch(error => {
                            clearTimeout(timeoutId); // 清除超时
                            console.error("从Firebase加载数据出错:", error);
                            
                            if (retryCount < maxRetries - 1) {
                                retryCount++;
                                console.log(`尝试第${retryCount}次重新加载...`);
                                sendDanmaku(`加载失败，第${retryCount}次重试中...`);
                                setTimeout(attemptLoadReports, retryDelay);
                            } else {
                                sendDanmaku('多次加载尝试失败，请检查网络或刷新页面');
                                // 尝试从缓存恢复
                                tryLoadCachedReports();
                            }
                        });
                } catch (error) {
                    clearTimeout(timeoutId); // 清除超时
                    console.error("Firebase加载过程中出现异常:", error);
                    
                    if (retryCount < maxRetries - 1) {
                        retryCount++;
                        console.log(`尝试第${retryCount}次重新加载...`);
                        sendDanmaku(`加载异常，第${retryCount}次重试中...`);
                        setTimeout(attemptLoadReports, retryDelay);
                    } else {
                        sendDanmaku('Firebase连接异常，尝试使用本地缓存');
                        // 尝试从缓存恢复
                        tryLoadCachedReports();
                    }
                }
            }
            
            // 从本地缓存加载报告
            function tryLoadCachedReports() {
                console.log("尝试从本地缓存加载报告数据...");
                
                try {
                    const cachedReports = localStorage.getItem('cached_reports');
                    if (cachedReports) {
                        const reports = JSON.parse(cachedReports);
                        if (Array.isArray(reports) && reports.length > 0) {
                            let markersAdded = 0;
                            reports.forEach(report => {
                                if (report && report.id) {
                                    const markerAdded = addReportMarker(report);
                                    if (markerAdded) markersAdded++;
                                }
                            });
                            
                            console.log(`从缓存加载了${markersAdded}个报告`);
                            sendDanmaku(`从本地缓存加载了${markersAdded}个报告`);
                            return;
                        }
                    }
                    
                    console.log("本地缓存中没有可用的报告数据");
                    sendDanmaku('无法加载数据，请检查网络后重试');
                } catch (error) {
                    console.error("从缓存加载报告失败:", error);
                    sendDanmaku('本地缓存读取失败，请刷新页面');
                }
            }
            
            // 缓存报告到本地存储
            function cacheReportLocally(report) {
                try {
                    // 获取现有缓存
                    let cachedReports = [];
                    const cachedData = localStorage.getItem('cached_reports');
                    if (cachedData) {
                        cachedReports = JSON.parse(cachedData);
                    }
                    
                    // 检查报告是否已存在，如果存在则更新
                    const existingIndex = cachedReports.findIndex(r => r.id === report.id);
                    if (existingIndex !== -1) {
                        cachedReports[existingIndex] = report;
                    } else {
                        cachedReports.push(report);
                    }
                    
                    // 只保留最近的50个报告，避免存储空间过大
                    if (cachedReports.length > 50) {
                        cachedReports.sort((a, b) => new Date(b.time) - new Date(a.time));
                        cachedReports = cachedReports.slice(0, 50);
                    }
                    
                    // 保存回本地存储
                    localStorage.setItem('cached_reports', JSON.stringify(cachedReports));
                } catch (error) {
                    console.error("缓存报告到本地存储失败:", error);
                }
            }
            
            // 开始尝试加载
            attemptLoadReports();
        }
        
        // 从Cloudflare Workers加载报告数据
        function loadReportsFromCloudflare() {
            console.log("尝试从Cloudflare加载报告数据...");
            fetch(`${cloudflareConfig.apiUrl}${cloudflareConfig.dataEndpoint}`)
                .then(response => {
                    console.log("Cloudflare API响应状态:", response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("从Cloudflare获取的数据:", data);
                    
                    // 清除现有标记
                    markers.forEach(marker => {
                        marker.setMap(null);
                    });
                    markers = [];
                    
                    // 这里根据实际API响应结构进行调整
                    // 有些API返回{markers:[...]}，有些直接返回[...]
                    const reportsList = data.markers || data.reports || data;
                    
                    if (reportsList && Array.isArray(reportsList) && reportsList.length > 0) {
                        reportsList.forEach(report => {
                            if (report && report.id) {
                                addReportMarker(report);
                            }
                        });
                        console.log("Reports loaded from Cloudflare:", markers.length);
                        
                        // 显示加载成功消息
                        sendDanmaku(currentLang === 'zh' ? 
                            `已从Cloudflare加载${markers.length}个标记` : 
                            `Loaded ${markers.length} markers from Cloudflare`
                        );
                    } else {
                        // 如果Cloudflare没有数据或数据格式不正确，回退到Firebase
                        console.log("Cloudflare没有返回有效数据，回退到Firebase");
                        sendDanmaku(currentLang === 'zh' ? 
                            '从Cloudflare加载失败，尝试Firebase' : 
                            'Failed to load from Cloudflare, trying Firebase'
                        );
                        loadReportsDirectlyFromFirebase();
                    }
                })
                .catch(error => {
                    console.error("从Cloudflare加载报告时出错:", error);
                    sendDanmaku(currentLang === 'zh' ? 
                        'Cloudflare连接失败，使用Firebase' : 
                        'Cloudflare connection failed, using Firebase'
                    );
                    // 错误时回退到Firebase
                    loadReportsDirectlyFromFirebase();
                });
        }
        
        // 直接从Firebase加载报告数据（作为回退）
        function loadReportsDirectlyFromFirebase() {
            console.log("直接从Firebase加载报告数据（回退模式）");
            
            reportsRef.once('value')
                .then((snapshot) => {
                    // 清除现有标记
                    markers.forEach(marker => {
                        marker.setMap(null);
                    });
                    markers = [];
                    
                    if (snapshot.exists()) {
                        snapshot.forEach((childSnapshot) => {
                            const report = childSnapshot.val();
                            if (report && report.id) {
                                addReportMarker(report);
                            }
                        });
                    }
                    
                    console.log("Reports loaded from Firebase fallback:", markers.length);
                    
                    // 显示加载成功消息
                    sendDanmaku(currentLang === 'zh' ? 
                        `已从Firebase加载${markers.length}个标记` : 
                        `Loaded ${markers.length} markers from Firebase`
                    );
                })
                .catch(error => {
                    console.error("从Firebase加载报告时出错:", error);
                    sendDanmaku(currentLang === 'zh' ? 
                        '无法加载报告数据' : 
                        'Unable to load report data'
                    );
                });
        }
        
        // 添加报告标记到地图
        function addReportMarker(report) {
            if (!map) return;
            
            const now = new Date();
            const reportTime = new Date(report.time);
            const reportAgeHours = (now - reportTime) / (1000 * 60 * 60);
            
            // 跳过超过3小时的报告
            if (reportAgeHours > 3) {
                console.log(`Report ID ${report.id} is older than 3 hours, not displaying`);
                return;
            }
            
            return addReportMarkerToMap(report);
        }
        
        // 快速报告函数修改
        function addQuickReport(location, description, emoji) {
            const now = new Date();
            const reportId = Date.now().toString();
            
            // 创建报告数据对象
            const reportData = {
                id: reportId,
                lat: location.lat,
                lng: location.lng,
                description: description,
                originalDescription: description,
                emoji: emoji,
                time: now.toISOString(),
                userId: currentUserId || 'anonymous'
            };
            
            // 创建标记
            const marker = addReportMarkerToMap(reportData);
            
            // 保存数据到服务务器
            if (useCloudflare) {
                saveReportToCloudflare(reportData);
            } else {
                saveReportToFirebase(reportData);
            }
            
            return marker;
        }
        
        // 保存报告到Firebase
        function saveReportToFirebase(reportData) {
            if (!reportData || !reportData.id) {
                console.error("无效的报告数据，无法保存到Firebase");
                sendDanmaku("报告数据无效，无法保存");
                return Promise.reject(new Error("无效的报告数据"));
            }
            
            console.log("尝试保存报告到Firebase:", reportData.id);
            
            // 实现Promise以允许错误处理和重试
            return new Promise((resolve, reject) => {
                // 添加重试逻辑
                let retryCount = 0;
                const maxRetries = 3;
                const retryDelay = 1500; // 1.5秒延迟
                
                // 超时处理
                const timeoutMs = 10000; // 10秒超时
                
                function attemptSave() {
                    const timeoutId = setTimeout(() => {
                        console.error(`保存到Firebase超时(${timeoutMs}ms)`);
                        if (retryCount < maxRetries) {
                            retryCount++;
                            console.log(`重试保存(${retryCount}/${maxRetries})...`);
                            sendDanmaku(`保存超时，正在重试(${retryCount}/${maxRetries})...`);
                            setTimeout(attemptSave, retryDelay);
                        } else {
                            // 超出重试次数，保存失败
                            reject(new Error("保存超时，已达到最大重试次数"));
                            // 尝试保存到本地暂存
                            saveToLocalStorage(reportData);
                        }
                    }, timeoutMs);
                    
                    try {
                        // 检查Firebase连接
                        const connectedRef = firebase.database().ref(".info/connected");
                        connectedRef.once("value", (snap) => {
                            if (snap.val() === true) {
                                console.log("Firebase连接正常，开始保存数据");
                                
                                // 添加时间戳和元数据
                                const enhancedReport = {
                                    ...reportData,
                                    savedAt: firebase.database.ServerValue.TIMESTAMP,
                                    clientInfo: {
                                        platform: navigator.platform,
                                        userAgent: navigator.userAgent,
                                        saveTimeLocal: new Date().toISOString()
                                    },
                                    // 记录重试次数，用于分析
                                    retryAttempt: retryCount
                                };
                                
                                // 保存数据
                                reportsRef.child(reportData.id.toString()).set(enhancedReport)
                                    .then(() => {
                                        clearTimeout(timeoutId);
                                        console.log("报告成功保存到Firebase:", reportData.id);
                                        sendDanmaku("报告已保存");
                                        
                                        // 增加用户报告计数
                                        incrementUserReportCount();
                                        
                                        // 如果设置了同步选项，将数据同步到Cloudflare
                                        if (syncToCloudflare && !useCloudflare) {
                                            syncReportToCloudflare(enhancedReport)
                                                .then(syncResult => {
                                                    console.log("同步到Cloudflare成功:", syncResult);
                                                })
                                                .catch(syncError => {
                                                    console.error("同步到Cloudflare失败:", syncError);
                                                });
                                        }
                                        
                                        // 缓存到localStorage
                                        cacheReportLocally(enhancedReport);
                                        
                                        resolve(enhancedReport);
                                    })
                                    .catch((error) => {
                                        clearTimeout(timeoutId);
                                        console.error("保存报告到Firebase失败:", error);
                                        
                                        if (retryCount < maxRetries) {
                                            retryCount++;
                                            console.log(`重试保存(${retryCount}/${maxRetries})...`);
                                            sendDanmaku(`保存失败，正在重试(${retryCount}/${maxRetries})...`);
                                            setTimeout(attemptSave, retryDelay);
                                        } else {
                                            sendDanmaku("保存报告失败，正在尝试备用方法");
                                            // 最后尝试保存到localStorage
                                            saveToLocalStorage(reportData);
                                            reject(error);
                                        }
                                    });
                            } else {
                                // Firebase连接失败
                                clearTimeout(timeoutId);
                                console.error("Firebase连接断开，无法保存数据");
                                
                                if (retryCount < maxRetries) {
                                    retryCount++;
                                    console.log(`等待连接恢复后重试(${retryCount}/${maxRetries})...`);
                                    sendDanmaku(`连接断开，等待恢复后重试(${retryCount}/${maxRetries})...`);
                                    setTimeout(attemptSave, retryDelay * 2); // 连接问题需要更长时间等待
                                } else {
                                    sendDanmaku("无法连接Firebase，保存到本地");
                                    // 保存到localStorage
                                    saveToLocalStorage(reportData);
                                    reject(new Error("Firebase连接断开，无法保存数据"));
                                }
                            }
                        });
                    } catch (error) {
                        clearTimeout(timeoutId);
                        console.error("保存报告到Firebase时出现异常:", error);
                        
                        if (retryCount < maxRetries) {
                            retryCount++;
                            console.log(`出现异常，重试(${retryCount}/${maxRetries})...`);
                            sendDanmaku(`保存时出错，正在重试(${retryCount}/${maxRetries})...`);
                            setTimeout(attemptSave, retryDelay);
                        } else {
                            sendDanmaku("保存时出错，已保存到本地");
                            // 尝试保存到localStorage
                            saveToLocalStorage(reportData);
                            reject(error);
                        }
                    }
                }
                
                // 首次尝试保存
                attemptSave();
            });
            
            // 保存到localStorage作为备份
            function saveToLocalStorage(report) {
                try {
                    // 获取现有的待发送报告
                    let pendingReports = [];
                    const pendingData = localStorage.getItem('pending_reports');
                    if (pendingData) {
                        pendingReports = JSON.parse(pendingData);
                    }
                    
                    // 添加当前报告到待发送列表
                    pendingReports.push({
                        ...report,
                        pendingSince: new Date().toISOString()
                    });
                    
                    // 限制最大待发送数量
                    if (pendingReports.length > 20) {
                        pendingReports = pendingReports.slice(-20); // 只保留最新的20条
                    }
                    
                    // 保存回localStorage
                    localStorage.setItem('pending_reports', JSON.stringify(pendingReports));
                    console.log(`报告已保存到本地，等待稍后同步，当前待发送: ${pendingReports.length}条`);
                    sendDanmaku("报告已保存到本地，将在网络恢复后同步");
                    
                    // 定期尝试发送待发送的报告
                    if (!window._pendingSyncInterval) {
                        window._pendingSyncInterval = setInterval(syncPendingReports, 60000); // 每分钟尝试同步一次
                    }
                } catch (error) {
                    console.error("保存报告到本地存储失败:", error);
                    sendDanmaku("保存到本地也失败，请检查浏览器存储空间");
                }
            }
        }
        
        // 同步待发送的报告
        function syncPendingReports() {
            try {
                const pendingData = localStorage.getItem('pending_reports');
                if (!pendingData) return;
                
                const pendingReports = JSON.parse(pendingData);
                if (!pendingReports || pendingReports.length === 0) return;
                
                console.log(`尝试同步${pendingReports.length}条待发送报告...`);
                
                // 检查Firebase连接
                firebase.database().ref(".info/connected").once("value", (snap) => {
                    if (snap.val() === true) {
                        console.log("Firebase连接已恢复，开始同步待发送报告");
                        
                        // 创建同步任务
                        const syncPromises = pendingReports.map(report => {
                            return reportsRef.child(report.id.toString()).set(report)
                                .then(() => {
                                    console.log(`待发送报告 ${report.id} 同步成功`);
                                    return { id: report.id, success: true };
                                })
                                .catch(error => {
                                    console.error(`待发送报告 ${report.id} 同步失败:`, error);
                                    return { id: report.id, success: false, error: error.message };
                                });
                        });
                        
                        // 执行所有同步任务
                        Promise.allSettled(syncPromises)
                            .then(results => {
                                // 计算成功和失败的数量
                                const succeeded = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
                                const failed = results.length - succeeded;
                                
                                console.log(`待发送报告同步结果: ${succeeded}成功, ${failed}失败`);
                                
                                if (succeeded > 0) {
                                    sendDanmaku(`${succeeded}条待发送报告已同步成功`);
                                    
                                    // 只保留失败的报告继续尝试
                                    let remainingReports = [];
                                    if (failed > 0) {
                                        remainingReports = pendingReports.filter(report => {
                                            const result = results.find(r => r.value && r.value.id === report.id);
                                            return !result || !result.value || !result.value.success;
                                        });
                                    }
                                    
                                    // 更新localStorage
                                    localStorage.setItem('pending_reports', JSON.stringify(remainingReports));
                                    
                                    // 如果没有待发送报告了，清除定时器
                                    if (remainingReports.length === 0 && window._pendingSyncInterval) {
                                        clearInterval(window._pendingSyncInterval);
                                        window._pendingSyncInterval = null;
                                    }
                                }
                            });
                    }
                });
            } catch (error) {
                console.error("同步待发送报告时出错:", error);
            }
        }
        
        // 同步报告到Cloudflare
        function syncReportToCloudflare(reportData) {
            console.log("正在同步报告到Cloudflare...", reportData.id);
            
            // 确保cloudflareConfig已正确定义
            if (!cloudflareConfig || !cloudflareConfig.apiUrl) {
                console.error("同步失败: cloudflareConfig未定义或不完整");
                sendDanmaku(currentLang === 'zh' ? 
                    'Cloudflare配置错误，同步失败' : 
                    'Cloudflare config error, sync failed'
                );
                return Promise.reject(new Error("Cloudflare配置错误"));
            }
            
            return new Promise((resolve, reject) => {
                // 1. 首先尝试使用firebase-to-cloudflare-sync.js中的同步函数
                if (window.firebaseCloudflareSync && typeof window.firebaseCloudflareSync.syncSingleReport === 'function') {
                    console.log("使用同步工具syncSingleReport函数...");
                    window.firebaseCloudflareSync.syncSingleReport(reportData)
                        .then(result => {
                            console.log("报告已同步到Cloudflare(使用同步工具):", result);
                            // 在成功时不添加任何额外的操作，因为syncSingleReport内部已有通知处理
                            resolve(result);
                        })
                        .catch(error => {
                            console.error("同步工具同步失败，尝试直接同步:", error);
                            // 失败时尝试直接同步
                            directSyncToCloudflare(reportData)
                                .then(resolve)
                                .catch(reject);
                        });
                } else {
                    // 2. 如果同步工具不可用，使用直接同步
                    console.log("同步工具不可用，使用直接同步方式");
                    directSyncToCloudflare(reportData)
                        .then(resolve)
                        .catch(reject);
                }
            });
        }
        
        // 直接同步到Cloudflare(不经过同步工具)
        function directSyncToCloudflare(reportData) {
            console.log("正在直接同步到Cloudflare API...", reportData.id);
            
            // 准备请求头
            const headers = {
                'Content-Type': 'application/json'
            };
            
            // 如果存在API密钥，添加到认证头
            if (cloudflareConfig.apiKey) {
                headers['Authorization'] = `Bearer ${cloudflareConfig.apiKey}`;
            }
            
            return fetch(`${cloudflareConfig.apiUrl}${cloudflareConfig.dataEndpoint}/${reportData.id}`, {
                method: 'PUT',
                headers: headers,
                body: JSON.stringify(reportData)
            })
            .then(response => {
                console.log("Cloudflare API响应状态:", response.status);
                if (!response.ok) {
                    throw new Error(`同步失败，HTTP错误: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("报告已直接同步到Cloudflare:", data);
                
                // 发送通知
                sendNotificationForReport(reportData);
                
                // 显示成功消息
                sendDanmaku(currentLang === 'zh' ? 
                    '报告已同步到Cloudflare' : 
                    'Report synced to Cloudflare'
                );
                
                return data;
            })
            .catch((error) => {
                console.error("直接同步报告到Cloudflare失败:", error);
                sendDanmaku(currentLang === 'zh' ? 
                    '同步到Cloudflare失败' : 
                    'Failed to sync to Cloudflare'
                );
                
                throw error; // 重新抛出错误以便上层处理
            });
        }
        
        // 发送报告通知
        function sendNotificationForReport(reportData) {
            console.log("为报告发送通知...", reportData);
            
            // 准备请求头
            const headers = {
                'Content-Type': 'application/json',
            };
            
            // 如果存在API密钥，添加到认证头
            if (cloudflareConfig.apiKey) {
                headers['Authorization'] = `Bearer ${cloudflareConfig.apiKey}`;
            }
            
            // 只有在设置了useRealApi才发送真实通知，否则模拟
            if (!cloudflareConfig.useRealApi && window.location.hostname.includes('github.io')) {
                console.log("GitHub Pages环境模拟通知发送");
                sendDanmaku(currentLang === 'zh' ? 
                    '模拟通知已发送' : 
                    'Simulated notification sent'
                );
                return Promise.resolve({ success: true, message: '模拟通知发送成功' });
            }
            
            return fetch(`${cloudflareConfig.apiUrl}/api/send-notification`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({
                    markerId: reportData.id,
                    markerData: reportData,
                    notification: {
                        title: '新报告添加',
                        body: reportData.description || (currentLang === 'zh' ? '新的地图标记' : 'New map marker'),
                        icon: './images/icon-192x192.png',
                        badge: './images/badge-72x72.png',
                        data: {
                            markerId: reportData.id,
                            time: Date.now()
                        },
                        requireInteraction: true,
                        vibrate: [200, 100, 200],
                        actions: [
                            { action: 'view', title: currentLang === 'zh' ? '查看' : 'View' }
                        ]
                    }
                })
            })
            .then(response => {
                console.log("通知发送结果:", response.status);
                if (response.ok) {
                    sendDanmaku(currentLang === 'zh' ? 
                        '报告已保存并发送通知' : 
                        'Report saved and notification sent'
                    );
                    return { success: true, message: '通知发送成功' };
                } else {
                    sendDanmaku(currentLang === 'zh' ? 
                        '保存报告并发送通知失败' : 
                        'Failed to save report and send notification'
                    );
                    return { success: false, message: '通知发送失败' };
                }
            })
            .catch(error => {
                console.error("发送通知失败:", error);
                sendDanmaku(currentLang === 'zh' ? 
                    '发送通知时出错' : 
                    'Error sending notification'
                );
                return { success: false, message: '通知发送失败' };
            });
        }
        
        // 保存报告到Cloudflare Workers
        function saveReportToCloudflare(reportData) {
            console.log("Saving report to Cloudflare Workers...", reportData);
            
            // 准备请求头
            const headers = {
                'Content-Type': 'application/json',
            };
            
            // 如果存在API密钥，添加到认证头
            if (cloudflareConfig.apiKey) {
                headers['Authorization'] = `Bearer ${cloudflareConfig.apiKey}`;
            }
            
            // 只有在设置了useRealApi且不在GitHub Pages环境时才使用真实API
            if (!cloudflareConfig.useRealApi && window.location.hostname.includes('github.io')) {
                console.log("GitHub Pages环境模拟数据保存");
                
                // 为了兼容性，保存到Firebase
                saveReportToFirebase(reportData);
                
                // 发送通知
                sendNotificationForReport(reportData);
                
                return Promise.resolve({ success: true, message: '模拟保存成功' });
            }
            
            return fetch(`${cloudflareConfig.apiUrl}${cloudflareConfig.dataEndpoint}`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(reportData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP错误 ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("报告已保存到Cloudflare Workers", data);
                
                // 为了兼容性，同时保存到Firebase
                saveReportToFirebase(reportData);
                
                // 发送通知
                sendNotificationForReport(reportData);
                
                return data;
            })
            .catch((error) => {
                console.error("保存报告到Cloudflare失败:", error);
                
                // 错误时回退到Firebase
                saveReportToFirebase(reportData);
                
                sendDanmaku(currentLang === 'zh' ? 
                    '保存到Cloudflare失败，已回退到Firebase' : 
                    'Failed to save to Cloudflare, fallback to Firebase'
                );
                
                throw error;
            });
        }
        
        // 更新将报告标记添加到地图
        function addReportMarkerToMap(reportData) {
            try {
                // 创建标记图标
                const markerIcon = {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(
                        `<svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" viewBox="0 0 42 42">
                            <circle cx="21" cy="21" r="20" fill="white" opacity="0.95"/>
                            <text x="21" y="29" font-size="24" text-anchor="middle" fill="black">${reportData.emoji || '📍'}</text>
                        </svg>`
                    ),
                    scaledSize: new google.maps.Size(42, 42),
                    anchor: new google.maps.Point(21, 21)
                };
                
                // 使用传统Marker API
                const marker = new google.maps.Marker({
                    position: { 
                        lat: parseFloat(reportData.lat), 
                        lng: parseFloat(reportData.lng) 
                    },
                    map: map,
                    icon: markerIcon,
                    title: reportData.description
                });
                
                // 创建信息窗口内容
                const infoContent = `
                    <div class="info-window">
                        <div class="emoji-display">${reportData.emoji || '📍'}</div>
                        <div class="description">${reportData.description}</div>
                        <div class="time-display">${formatTimeAgo(new Date(reportData.time))}</div>
                    </div>
                `;
                
                const infoWindow = new google.maps.InfoWindow({
                    content: infoContent,
                    maxWidth: 200
                });
                
                // 为传统Marker添加点击事件
                marker.addListener("click", function() {
                    console.log('Report marker clicked:', reportData.id);
                    // 关闭所有活动的信息窗口
                    if (this.infoWindow) this.infoWindow.close();
                    showReportDetails(reportData);
                });
                
                // 保存infoWindow的引用和reportData到marker对象上
                marker.infoWindow = infoWindow;
                marker.reportData = reportData;
                
                // 添加到标记数组
                markers.push(marker);
                
                // 将数据保存到Firebase或Cloudflare
                console.log("保存标记数据，存储系统:", useCloudflare ? "Cloudflare" : "Firebase");
                
                if (useCloudflare) {
                    // 保存到Cloudflare
                    saveReportToCloudflare(reportData);
                } else {
                    // 保存到Firebase
                    reportsRef.child(reportData.id.toString()).set(reportData)
                        .then(() => {
                            console.log("Quick report saved to Firebase", reportData);
                            
                            // 增加用户报告计数
                            incrementUserReportCount();
                            
                            // 同步到Cloudflare
                            if (syncToCloudflare) {
                                syncReportToCloudflare(reportData);
                            }
                        })
                        .catch((error) => {
                            console.error("Error saving quick report to Firebase:", error);
                            sendDanmaku(currentLang === 'zh' ? 
                                '标记已添加到地图，但保存到服务器失败' : 
                                'Marker added to map, but failed to save to server'
                            );
                        });
                }
                
                return marker;
            } catch (error) {
                console.error("添加标记时出错:", error, reportData);
                // 返回null以便调用者可以处理错误
                return null;
            }
        }
        
        // 报告详情弹窗
        function showReportDetails(report) {
            // 先检查是否已有详情弹窗，有则移除
            let existingDetailPopup = document.getElementById('reportDetailPopup');
            if (existingDetailPopup) {
                existingDetailPopup.remove();
            }
            
            // 创建详情弹窗
            const detailPopup = document.createElement('div');
            detailPopup.id = 'reportDetailPopup';
            detailPopup.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);width:90%;max-width:400px;background-color:rgba(33,33,33,0.95);border-radius:16px;padding:20px;z-index:5002;box-shadow:0 4px 20px rgba(0,0,0,0.5);color:white;animation:popup-fade-in 0.3s ease-out;max-height:90vh;overflow-y:auto;';
            
            // 添加关闭按钮
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '&times;';
            closeBtn.style.cssText = 'position:absolute;top:10px;right:15px;background:none;border:none;color:white;font-size:24px;cursor:pointer;';
            closeBtn.onclick = function() {
                detailPopup.remove();
            };
            detailPopup.appendChild(closeBtn);
            
            // 添加报告时间和用户信息
            const headerDiv = document.createElement('div');
            const reportTime = new Date(report.time);
            headerDiv.style.cssText = 'display:flex;justify-content:space-between;align-items:center;';
            headerDiv.innerHTML = `
                <span style="color:#aaa;font-size:14px;">${reportTime.toLocaleString()}</span>
                <span style="color:#aaa;font-size:14px;">👤 ${report.userName || (currentLang === 'zh' ? '用户' : 'User')}</span>
            `;
            detailPopup.appendChild(headerDiv);
            
            // 添加标题
            const titleDiv = document.createElement('div');
            titleDiv.innerHTML = `<h3 style="margin:10px 0 15px;font-size:20px;">${report.emoji} ${i18n[currentLang].reportDetails}</h3>`;
            detailPopup.appendChild(titleDiv);
            
            // 添加图片（如果有）
            if (report.image && report.image.length > 0) {
                const imageDiv = document.createElement('div');
                imageDiv.style.cssText = 'width:100%;height:200px;margin:15px 0;border-radius:8px;overflow:hidden;';
                const img = document.createElement('img');
                img.src = report.image;
                img.style.cssText = 'width:100%;height:100%;object-fit:cover;';
                imageDiv.appendChild(img);
                detailPopup.appendChild(imageDiv);
            }
            
            // 添加描述和翻译按钮
            const descDiv = document.createElement('div');
            descDiv.id = 'descriptionText';
            descDiv.style.cssText = 'margin:15px 0;padding:10px;background-color:rgba(255,255,255,0.1);border-radius:8px;';
            const descText = report.description || i18n[currentLang].noDescription;
            
            // 优先使用原始描述（如果有）
            const displayText = report.originalDescription || descText;
            descDiv.innerText = displayText;
            
            // 如果有描述，添加翻译按钮
            if (displayText && displayText !== i18n[currentLang].noDescription) {
                const translateBtn = document.createElement('span');
                translateBtn.className = 'translate-btn';
                translateBtn.innerHTML = i18n[currentLang].translate;
                translateBtn.style.color = '#3498db'; // 蓝色地球emoji采用蓝色
                translateBtn.onclick = function() {
                    this.innerText = i18n[currentLang].translating;
                    this.style.pointerEvents = 'none';
                    
                    // 检测原文语言并翻译到对应语言
                    const isEnglish = /^[a-zA-Z0-9\s.,!?;:()"'-]+$/.test(displayText.trim());
                    const targetLang = isEnglish ? 'zh' : 'en';
                    
                    // 翻译文本
                    translateText(displayText, targetLang)
                        .then(translatedText => {
                            const translatedDiv = document.createElement('div');
                            translatedDiv.className = 'translated-text';
                            translatedDiv.innerText = `${i18n[currentLang].translation}${translatedText}`;
                            
                            // 检查是否已有翻译，如果有则替换
                            const existingTranslation = document.getElementById('translatedText');
                            if (existingTranslation) {
                                existingTranslation.remove();
                            }
                            
                            translatedDiv.id = 'translatedText';
                            descDiv.appendChild(translatedDiv);
                            
                            // 重置按钮
                            this.innerHTML = i18n[currentLang].translate;
                            this.style.pointerEvents = 'auto';
                        })
                        .catch(error => {
                            console.error('翻译失败:', error);
                            // 重置按钮
                            this.innerHTML = i18n[currentLang].translate;
                            this.style.pointerEvents = 'auto';
                        });
                };
                
                // 添加翻译按钮到描述div之后
                descDiv.appendChild(document.createElement('br'));
                descDiv.appendChild(translateBtn);
            }
            
            detailPopup.appendChild(descDiv);
            
            // 添加操作按钮（评论和删除）
            const actionDiv = document.createElement('div');
            actionDiv.style.cssText = 'display:flex;justify-content:space-between;margin:15px 0;';
            
            // 添加评论按钮
            const commentBtn = document.createElement('button');
            commentBtn.innerHTML = '💬'; // 评论气泡emoji
            commentBtn.title = i18n[currentLang].addComment;
            commentBtn.style.cssText = 'background:rgba(255,255,255,0.2);border:none;color:white;border-radius:50%;width:40px;height:40px;font-size:20px;cursor:pointer;display:flex;align-items:center;justify-content:center;';
            commentBtn.onclick = function() {
                showCommentForm(report, detailPopup);
            };
            actionDiv.appendChild(commentBtn);
            
            // 添加删除按钮（仅对报告创建者显示）
            if (currentUserId === report.userId || isCurrentUserAdmin) {
                const deleteBtn = document.createElement('button');
                deleteBtn.innerHTML = '🗑️'; // 垃圾桶emoji
                deleteBtn.title = i18n[currentLang].deleteReport;
                deleteBtn.style.cssText = 'background:rgba(255,80,80,0.2);border:none;color:white;border-radius:50%;width:40px;height:40px;font-size:20px;cursor:pointer;display:flex;align-items:center;justify-content:center;';
                deleteBtn.onclick = function() {
                    if (isCurrentUserAdmin && currentUserId !== report.userId) {
                        // 管理员删除他人的报告
                        confirmDeleteReportAdmin(report.id);
                    } else {
                        // 用户删除自己的报告
                        confirmDeleteReport(report.id, detailPopup);
                    }
                };
                actionDiv.appendChild(deleteBtn);
            }
            
            // 添加管理员特定控制（如果当前用户是管理员）
            if (isCurrentUserAdmin) {
                // 添加封禁用户按钮（不能封禁自己）
                if (report.userId && report.userId !== currentUserId) {
                    const banUserBtn = document.createElement('button');
                    banUserBtn.innerHTML = '🚫'; // 禁止emoji
                    banUserBtn.title = i18n[currentLang].banUser;
                    banUserBtn.style.cssText = 'background:rgba(255,80,80,0.2);border:none;color:white;border-radius:50%;width:40px;height:40px;font-size:20px;cursor:pointer;display:flex;align-items:center;justify-content:center;';
                    banUserBtn.onclick = function() {
                        confirmBanUser(report.userId, report.userName || report.userId);
                        detailPopup.remove();
                    };
                    actionDiv.appendChild(banUserBtn);
                    
                    // 管理员权限按钮
                    const adminBtn = document.createElement('button');
                    if (report.isAdmin) {
                        adminBtn.textContent = '⬇️';
                        adminBtn.title = i18n[currentLang].removeAdmin;
                        adminBtn.addEventListener('click', () => removeAdminRole(report.userId));
                    } else {
                        adminBtn.textContent = '⬆️';
                        adminBtn.title = i18n[currentLang].promoteAdmin;
                        adminBtn.addEventListener('click', () => grantAdminRole(report.userId));
                    }
                    adminBtn.style.cssText = 'background:none;border:none;cursor:pointer;font-size:16px;padding:5px;';
                    actionDiv.appendChild(adminBtn);
                }
                
                // 添加管理标签
                const adminLabel = document.createElement('div');
                adminLabel.textContent = i18n[currentLang].adminControls;
                adminLabel.style.cssText = 'position:absolute;top:10px;left:15px;color:#ff3b30;font-size:12px;font-weight:bold;';
                detailPopup.appendChild(adminLabel);
            }
            
            detailPopup.appendChild(actionDiv);
            
            // 显示评论区
            const commentsSection = document.createElement('div');
            commentsSection.id = 'commentsSection';
            commentsSection.style.cssText = 'margin-top:20px;';
            
            const commentsTitle = document.createElement('h4');
            commentsTitle.textContent = i18n[currentLang].comments;
            commentsTitle.style.cssText = 'margin-bottom:10px;font-size:16px;border-bottom:1px solid rgba(255,255,255,0.2);padding-bottom:5px;';
            commentsSection.appendChild(commentsTitle);
            
            // 加载评论
            loadComments(report.id, commentsSection);
            
            detailPopup.appendChild(commentsSection);
            
            // 添加到文档
            document.body.appendChild(detailPopup);
            
            // 将描述发送到弹幕
            if (report.description) {
                sendDanmaku(report.description);
            }
        }
        
        // 显示评论表单
        function showCommentForm(report, parentPopup) {
            // 创建评论表单容器
            const commentFormDiv = document.createElement('div');
            commentFormDiv.id = 'commentFormDiv';
            commentFormDiv.style.cssText = 'margin-top:15px;background-color:rgba(255,255,255,0.1);border-radius:8px;padding:10px;';
            
            // 创建评论输入框
            const commentInput = document.createElement('textarea');
            commentInput.placeholder = i18n[currentLang].commentPlaceholder;
            commentInput.style.cssText = 'width:100%;min-height:60px;resize:vertical;padding:8px;border-radius:4px;border:1px solid #444;background-color:#2c2c2e;color:#fff;font-size:14px;';
            commentFormDiv.appendChild(commentInput);
            
            // 创建按钮容器
            const btnContainer = document.createElement('div');
            btnContainer.style.cssText = 'display:flex;justify-content:flex-end;gap:10px;margin-top:10px;';
            
            // 取消按钮
            const cancelBtn = document.createElement('button');
            cancelBtn.textContent = i18n[currentLang].cancelComment;
            cancelBtn.style.cssText = 'padding:6px 12px;border-radius:4px;border:none;background-color:#3a3a3c;color:white;cursor:pointer;';
            cancelBtn.onclick = function() {
                commentFormDiv.remove();
            };
            btnContainer.appendChild(cancelBtn);
            
            // 提交按钮
            const submitBtn = document.createElement('button');
            submitBtn.textContent = i18n[currentLang].submitComment;
            submitBtn.style.cssText = 'padding:6px 12px;border-radius:4px;border:none;background-color:#0071e3;color:white;cursor:pointer;';
            submitBtn.onclick = function() {
                const commentText = commentInput.value.trim();
                if (commentText) {
                    addComment(report.id, commentText);
                    commentFormDiv.remove();
                    // 刷新评论区
                    const commentsSection = document.getElementById('commentsSection');
                    if (commentsSection) {
                        loadComments(report.id, commentsSection);
                    }
                }
            };
            btnContainer.appendChild(submitBtn);
            
            commentFormDiv.appendChild(btnContainer);
            
            // 添加到父弹窗
            parentPopup.appendChild(commentFormDiv);
            
            // 聚焦输入框
            commentInput.focus();
        }
        
        // 添加评论
        function addComment(reportId, commentText) {
            if (!currentUserId) return;
            
            const newComment = {
                id: Date.now(),
                userId: currentUserId,
                userName: document.getElementById('userDisplayName').textContent || (currentLang === 'zh' ? '用户' : 'User'),
                text: commentText,
                time: new Date().toISOString()
            };
            
            // 获取报告引用
            const reportRef = reportsRef.child(reportId.toString());
            
            // 先获取当前评论，然后添加新评论
            reportRef.child('comments').once('value')
                .then((snapshot) => {
                    let comments = [];
                    if (snapshot.exists()) {
                        comments = snapshot.val() || [];
                    }
                    
                    // 添加新评论
                    comments.push(newComment);
                    
                    // 更新评论列表
                    return reportRef.child('comments').set(comments);
                })
                .then(() => {
                    console.log('评论添加成功');
                    // 发送评论到弹幕
                    sendDanmaku(`💬 ${newComment.userName}: ${commentText}`);
                })
                .catch((error) => {
                    console.error('添加评论失败:', error);
                });
        }
        
        // 加载评论
        function loadComments(reportId, commentsSection) {
            // 清空现有内容
            while (commentsSection.childNodes.length > 1) {
                commentsSection.removeChild(commentsSection.lastChild);
            }
            
            // 获取报告的评论
            reportsRef.child(reportId.toString()).child('comments').once('value')
                .then((snapshot) => {
                    if (snapshot.exists() && snapshot.val()) {
                        const comments = snapshot.val();
                        
                        // 显示评论
                        comments.forEach(comment => {
                            const commentDiv = document.createElement('div');
                            commentDiv.style.cssText = 'margin-bottom:10px;padding:8px;background-color:rgba(255,255,255,0.05);border-radius:4px;';
                            
                            const commentHeader = document.createElement('div');
                            commentHeader.style.cssText = 'display:flex;justify-content:space-between;margin-bottom:5px;';
                            
                            const userName = document.createElement('span');
                            userName.textContent = `👤 ${comment.userName || (currentLang === 'zh' ? '用户' : 'User')}`;
                            userName.style.cssText = 'font-weight:bold;font-size:14px;';
                            commentHeader.appendChild(userName);
                            
                            const commentTime = document.createElement('span');
                            commentTime.textContent = new Date(comment.time).toLocaleString();
                            commentTime.style.cssText = 'color:#aaa;font-size:12px;';
                            commentHeader.appendChild(commentTime);
                            
                            commentDiv.appendChild(commentHeader);
                            
                            const commentText = document.createElement('p');
                            commentText.textContent = comment.text;
                            commentText.style.cssText = 'margin:0;font-size:14px;';
                            commentDiv.appendChild(commentText);
                            
                            commentsSection.appendChild(commentDiv);
                        });
                    } else {
                        // 无评论时显示提示
                        const noCommentsDiv = document.createElement('p');
                        noCommentsDiv.textContent = i18n[currentLang].noComments;
                        noCommentsDiv.style.cssText = 'color:#aaa;font-style:italic;text-align:center;font-size:14px;';
                        commentsSection.appendChild(noCommentsDiv);
                    }
                })
                .catch((error) => {
                    console.error('加载评论失败:', error);
                    const errorDiv = document.createElement('p');
                    errorDiv.textContent = 'Error loading comments';
                    errorDiv.style.cssText = 'color:red;text-align:center;';
                    commentsSection.appendChild(errorDiv);
                });
        }
        
        // 确认删除报告
        function confirmDeleteReport(reportId, parentPopup) {
            // 创建确认弹窗
            const confirmDiv = document.createElement('div');
            confirmDiv.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background-color:rgba(40,40,40,0.95);border-radius:8px;padding:15px;width:80%;text-align:center;box-shadow:0 4px 20px rgba(0,0,0,0.7);z-index:5002;';
            
            const confirmText = document.createElement('p');
            confirmText.textContent = i18n[currentLang].confirmDelete;
            confirmText.style.cssText = 'margin-bottom:15px;font-size:16px;';
            confirmDiv.appendChild(confirmText);
            
            const btnContainer = document.createElement('div');
            btnContainer.style.cssText = 'display:flex;justify-content:center;gap:15px;';
            
            // 确认按钮
            const yesBtn = document.createElement('button');
            yesBtn.textContent = i18n[currentLang].yes;
            yesBtn.style.cssText = 'padding:8px 16px;border-radius:4px;border:none;background-color:#e53935;color:white;cursor:pointer;';
            yesBtn.onclick = function() {
                deleteReport(reportId);
                parentPopup.remove();
            };
            btnContainer.appendChild(yesBtn);
            
            // 取消按钮
            const noBtn = document.createElement('button');
            noBtn.textContent = i18n[currentLang].no;
            noBtn.style.cssText = 'padding:8px 16px;border-radius:4px;border:none;background-color:#3a3a3c;color:white;cursor:pointer;';
            noBtn.onclick = function() {
                confirmDiv.remove();
            };
            btnContainer.appendChild(noBtn);
            
            confirmDiv.appendChild(btnContainer);
            
            // 添加到父弹窗
            parentPopup.appendChild(confirmDiv);
        }
        
        // 删除报告
        function deleteReport(reportId) {
            reportsRef.child(reportId.toString()).remove()
                .then(() => {
                    console.log('报告删除成功:', reportId);
                    
                    // 删除对应的标记
                    const markerIndex = markers.findIndex(marker => marker.reportData && marker.reportData.id == reportId);
                    if (markerIndex !== -1) {
                        markers[markerIndex].setMap(null);
                        markers.splice(markerIndex, 1);
                    }
                    
                    // 发送删除成功的通知弹幕
                    sendDanmaku(currentLang === 'zh' ? '报告已成功删除' : 'Report successfully deleted');
                })
                .catch((error) => {
                    console.error('删除报告失败:', error);
                    alert(currentLang === 'zh' ? '删除失败，请重试' : 'Delete failed, please try again');
                });
        }
        
        // 简单的文本翻译函数（使用模拟翻译，实际应用中应替换为真实API）
        async function translateText(text, targetLang) {
            // 在实际应用中，这里应该调用翻译API，如Google Translate API
            // 这里使用简单模拟，根据目标语言返回不同的文本
            
            // 延时1秒模拟API调用
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            if (targetLang === 'zh') {
                // 英文到中文的简单映射
                const enToCnMap = {
                    'dog': '狗',
                    'cat': '猫',
                    'hello': '你好',
                    'traffic': '交通',
                    'accident': '事故',
                    'attention': '注意',
                    'caution': '小心',
                    'danger': '危险',
                    'warning': '警告',
                    'help': '帮助',
                    'police': '警察',
                    'emergency': '紧急情况',
                    'crowded': '拥挤',
                    'delayed': '延误',
                    'cancelled': '取消',
                    'closed': '关闭',
                    'open': '开放',
                };
                
                let translated = text;
                Object.keys(enToCnMap).forEach(key => {
                    const regex = new RegExp(key, 'gi');
                    translated = translated.replace(regex, enToCnMap[key]);
                });
                
                return translated;
            } else {
                // 中文到英文的简单映射
                const cnToEnMap = {
                    '狗': 'dog',
                    '猫': 'cat',
                    '你好': 'hello',
                    '交通': 'traffic',
                    '事故': 'accident',
                    '注意': 'attention',
                    '小心': 'caution',
                    '危险': 'danger',
                    '警告': 'warning',
                    '帮助': 'help',
                    '警察': 'police',
                    '紧急情况': 'emergency',
                    '拥挤': 'crowded',
                    '延误': 'delayed',
                    '取消': 'cancelled',
                    '关闭': 'closed',
                    '开放': 'open',
                };
                
                let translated = text;
                Object.keys(cnToEnMap).forEach(key => {
                    translated = translated.replace(new RegExp(key, 'g'), cnToEnMap[key]);
                });
                
                return translated;
            }
        }
        
        // 弹幕相关函数
        function sendDanmaku(text) {
            // 限制长度，过长的文本会被截断
            const maxLength = 30;
            let danmakuText = text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
            
            // 如果文本为空，不显示弹幕
            if (!danmakuText.trim()) return;
            
            // 尝试根据当前语言进行翻译
            if (currentLang === 'en') {
                // 如果当前是英文界面，但内容包含中文字符，尝试转为英文
                if (/[\u4e00-\u9fa5]/.test(danmakuText)) {
                    // 简单的中英文关键词映射
                    const cnToEnMap = {
                        '狗': 'dog',
                        '猫': 'cat',
                        '你好': 'hello',
                        '交通': 'traffic',
                        '事故': 'accident',
                        '注意': 'attention',
                        '小心': 'caution',
                        '危险': 'danger',
                        '警告': 'warning',
                        '帮助': 'help',
                        '警察': 'police',
                        '紧急情况': 'emergency',
                        '拥挤': 'crowded',
                        '延误': 'delayed',
                        '取消': 'cancelled',
                        '关闭': 'closed',
                        '开放': 'open',
                        '正常': 'normal',
                        '服务': 'service',
                        '电车': 'tram',
                        '轨道': 'track',
                        '维修': 'maintenance',
                        '站': 'stop',
                        '临时': 'temporary',
                        '频率': 'frequency',
                        '高峰': 'peak',
                        '市中心': 'CBD',
                        '线': 'route',
                        '号线': 'route',
                        '游客': 'Guest',
                        '添加': 'Add',
                        '报告': 'Report',
                        '评论': 'Comment',
                        '欢迎': 'Welcome',
                        '使用': 'using',
                        '地图': 'map',
                        '系统': 'system'
                    };
                    
                    // 尝试替换中文关键词
                    for (const [cn, en] of Object.entries(cnToEnMap)) {
                        danmakuText = danmakuText.replace(new RegExp(cn, 'g'), en);
                    }
                    
                    // 对于常见的线路公告格式进行特殊处理
                    danmakuText = danmakuText.replace(/(\d+)号线/g, 'Route $1');
                }
            } else if (currentLang === 'zh') {
                // 如果当前是中文界面，但内容不包含中文字符，可能是英文
                if (!/[\u4e00-\u9fa5]/.test(danmakuText) && danmakuText.length > 5) {
                    // 这里可以添加英文到中文的简单转换，但默认保留英文也可以
                    // 简单处理Route格式
                    danmakuText = danmakuText.replace(/Route (\d+)/g, '$1号线');
                }
            }
            
            // 添加到队列
            danmakuQueue.push(danmakuText);
            
            // 如果弹幕系统未运行，启动它
            if (!danmakuRunning) {
                processDanmakuQueue();
            }
        }
        
        function processDanmakuQueue() {
            if (danmakuQueue.length === 0) {
                danmakuRunning = false;
                return;
            }
            
            danmakuRunning = true;
            const text = danmakuQueue.shift();
            createDanmaku(text);
            
            // 每隔一段时间处理下一个弹幕
            setTimeout(processDanmakuQueue, 2500);
        }
        
        function createDanmaku(text) {
            // 处理文本中的线路信息，根据当前语言进行转换
            if (currentLang === 'en') {
                // 转换中文的线路通知格式为英文
                text = text.replace(/(\d+)号线[:：](.+)/, 'Route $1: $2');
                
                // 替换常见中文文本
                const commonPhrases = {
                    '轻微延误': 'minor delays',
                    '正常服务': 'normal service',
                    '轨道维修': 'track maintenance',
                    '临时关闭': 'temporarily closed',
                    '高峰时段': 'peak hours',
                    '服务变更': 'service changes',
                    '增加频率': 'increased frequency',
                    '本周末': 'this weekend',
                    '计划维护': 'scheduled maintenance',
                    '之间': 'between',
                    '附近': 'near',
                    '预计': 'expected',
                    '导致': 'due to',
                    '由于': 'due to',
                    '道路工程': 'road works',
                    '服务已恢复': 'service has resumed',
                    '早先的中断': 'earlier disruption'
                };
                
                for (const [cn, en] of Object.entries(commonPhrases)) {
                    text = text.replace(new RegExp(cn, 'g'), en);
                }
            } else if (currentLang === 'zh') {
                // 转换英文的线路通知格式为中文
                text = text.replace(/Route (\d+): (.+)/, '$1号线: $2');
                
                // 替换常见英文文本
                const commonPhrases = {
                    'minor delays': '轻微延误',
                    'normal service': '正常服务',
                    'track maintenance': '轨道维修',
                    'temporarily closed': '临时关闭',
                    'peak hours': '高峰时段',
                    'service changes': '服务变更',
                    'increased frequency': '增加频率',
                    'this weekend': '本周末',
                    'scheduled maintenance': '计划维护',
                    'between': '之间',
                    'near': '附近',
                    'expected': '预计',
                    'due to': '由于',
                    'road works': '道路工程',
                    'service has resumed': '服务已恢复',
                    'earlier disruption': '早先的中断'
                };
                
                for (const [en, cn] of Object.entries(commonPhrases)) {
                    text = text.replace(new RegExp(en, 'gi'), cn);
                }
            }
            
            const danmaku = document.createElement('div');
            danmaku.className = 'danmaku';
            danmaku.textContent = text;
            
            // 随机颜色
            const colors = ['#ffffff', '#ff9900', '#00cc99', '#66ccff', '#ff6666', '#cc99ff'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            danmaku.style.color = color;
            
            // 随机行高位置，避免重叠
            const lane = Math.floor(Math.random() * 8);
            danmaku.style.top = (lane * 40 + 20) + 'px';
            
            // 计算动画持续时间（根据文本长度调整）
            // 增加基础时间和随机时间，使弹幕速度变慢
            const duration = 10 + Math.random() * 5; // 原来是5+3，现在改为10+5
            danmaku.style.animationDuration = duration + 's';
            
            // 添加到容器
            danmakuContainer.appendChild(danmaku);
            
            // 添加到活动弹幕列表
            activeDanmakus.push(danmaku);
            
            // 动画结束后删除
            setTimeout(() => {
                danmaku.remove();
                const index = activeDanmakus.indexOf(danmaku);
                if (index > -1) {
                    activeDanmakus.splice(index, 1);
                }
            }, duration * 1000);
        }
        
        // 初始化弹幕系统
        function initDanmakuSystem() {
            // 清空现有队列
            danmakuQueue.length = 0;
            
            // 添加电车公告到队列
            const announcements = currentLang === 'zh' ? tramAnnouncementsCN : tramAnnouncements;
            announcements.forEach(announcement => {
                danmakuQueue.push(announcement);
            });
            
            // 添加欢迎消息
            danmakuQueue.push(currentLang === 'zh' ? "欢迎使用PtvAlert地图报告系统" : "Welcome to PtvAlert Map Reporting System");
            
            // 启动弹幕处理
            if (!danmakuRunning) {
                processDanmakuQueue();
            }
        }
        
        // 添加刷新电车信息按钮
        function addRefreshTramButton() {
            const refreshBtn = document.createElement('button');
            refreshBtn.id = 'refreshTramBtn';
            refreshBtn.style.cssText = 'position:fixed;top:60px;left:18px;z-index:1001;background:rgba(255,255,255,0.8);color:#333;border-radius:20px;padding:6px 12px;font-size:14px;font-weight:bold;box-shadow:0 2px 12px rgba(0,0,0,0.18);border:2px solid #0071e3;cursor:pointer;display:flex;align-items:center;gap:6px;';
            refreshBtn.innerHTML = `<span style="font-size:16px;">🚃</span><span id="refreshTramText">${i18n[currentLang].refreshTramInfo}</span>`;
            
            refreshBtn.addEventListener('click', function() {
                initDanmakuSystem();
            });
            
            document.body.appendChild(refreshBtn);
        }
        
        // 打开管理员面板
        function openAdminPanel() {
            if (!isCurrentUserAdmin) return;
            
            // 更新面板语言
            updateAdminPanelLanguage();
            
            // 显示管理员面板
            const adminPanel = document.getElementById('adminPanel');
            adminPanel.style.display = 'flex';
            
            // 加载报告列表和用户列表
            loadReportsForAdmin();
            loadUsersForAdmin();
            
            // 加载当前全局公告
            loadGlobalAnnouncement();
        }
        
        // 关闭管理员面板
        function closeAdminPanel() {
            const adminPanel = document.getElementById('adminPanel');
            adminPanel.style.display = 'none';
        }
        
        // 更新管理员面板语言
        function updateAdminPanelLanguage() {
            // 标题和关闭按钮
            document.getElementById('adminPanelTitle').textContent = i18n[currentLang].adminPanel;
            
            // 公告部分
            document.getElementById('adminAnnouncementTitle').textContent = i18n[currentLang].announcements;
            document.getElementById('adminAnnouncementLabel').textContent = i18n[currentLang].announcementContent;
            document.getElementById('adminAnnouncementTypeLabel').textContent = i18n[currentLang].announcementType;
            document.getElementById('publishAnnouncement').textContent = i18n[currentLang].publishTempAnnouncement;
            document.getElementById('publishGlobalAnnouncement').textContent = i18n[currentLang].publishGlobalAnnouncement;
            document.getElementById('clearGlobalAnnouncement').textContent = i18n[currentLang].clearGlobalAnnouncement;
            
            // 报告管理部分
            document.getElementById('adminReportsTitle').textContent = i18n[currentLang].reportsManagement;
            document.getElementById('adminReportsFilterLabel').textContent = i18n[currentLang].filterCondition;
            document.getElementById('reportIdHeader').textContent = i18n[currentLang].id;
            document.getElementById('reportTimeHeader').textContent = i18n[currentLang].time;
            document.getElementById('reportUserHeader').textContent = i18n[currentLang].user;
            document.getElementById('reportDescHeader').textContent = i18n[currentLang].description;
            document.getElementById('reportActionsHeader').textContent = i18n[currentLang].actions;
            document.getElementById('refreshReportsBtn').textContent = i18n[currentLang].refresh;
            
            // 用户管理部分
            document.getElementById('adminUsersTitle').textContent = i18n[currentLang].userManagement;
            document.getElementById('adminUserManageLabel').textContent = i18n[currentLang].userIdOrEmail;
            document.getElementById('banUserBtn').textContent = i18n[currentLang].banUser;
            document.getElementById('unbanUserBtn').textContent = i18n[currentLang].unbanUser;
            document.getElementById('promoteToAdminBtn').textContent = i18n[currentLang].promoteAdmin;
            document.getElementById('removeAdminBtn').textContent = i18n[currentLang].removeAdmin;
            document.getElementById('userIdHeader').textContent = i18n[currentLang].id;
            document.getElementById('userNameHeader').textContent = i18n[currentLang].userName;
            document.getElementById('userStatusHeader').textContent = i18n[currentLang].status;
            document.getElementById('userRoleHeader').textContent = i18n[currentLang].role;
            document.getElementById('userActionsHeader').textContent = i18n[currentLang].actions;
            document.getElementById('refreshUsersBtn').textContent = i18n[currentLang].refresh;
            
            // 更新下拉选项
            const announcementTypeSelect = document.getElementById('announcementType');
            announcementTypeSelect.innerHTML = `
                <option value="warning">${i18n[currentLang].warning}</option>
                <option value="error">${i18n[currentLang].error}</option>
                <option value="info">${i18n[currentLang].info}</option>
            `;
        }
        
        // 发布临时公告
        function publishTemporaryAnnouncement() {
            const announcementText = document.getElementById('announcementText').value.trim();
            if (!announcementText) return;
            
            const announcementType = document.getElementById('announcementType').value;
            
            // 创建临时公告元素
            const announcementEl = document.createElement('div');
            announcementEl.className = `admin-announcement ${announcementType}`;
            
            const contentEl = document.createElement('div');
            contentEl.className = 'admin-announcement-content';
            contentEl.textContent = announcementText;
            announcementEl.appendChild(contentEl);
            
            const closeBtn = document.createElement('button');
            closeBtn.className = 'admin-announcement-close';
            closeBtn.innerHTML = '&times;';
            closeBtn.addEventListener('click', function() {
                announcementEl.remove();
            });
            announcementEl.appendChild(closeBtn);
            
            // 添加到页面
            document.body.appendChild(announcementEl);
            
            // 5秒后自动消失
            setTimeout(() => {
                if (document.body.contains(announcementEl)) {
                    announcementEl.remove();
                }
            }, 10000);
            
            // 保存到数据库作为历史记录
            const newAnnouncement = {
                text: announcementText,
                type: announcementType,
                time: new Date().toISOString(),
                userId: currentUserId,
                userName: document.getElementById('userDisplayName').textContent,
                temporary: true
            };
            
            announcementsRef.push(newAnnouncement)
                .then(() => {
                    console.log('临时公告已保存到数据库');
                })
                .catch((error) => {
                    console.error('保存公告出错:', error);
                });
            
            // 清空输入框
            document.getElementById('announcementText').value = '';
            
            // 将公告作为弹幕发送
            sendDanmaku(`📢 ${announcementText}`);
        }
        
        // 加载用户列表（管理员用）
        function loadUsersForAdmin() {
            if (!isCurrentUserAdmin) return;
            
            // 获取用户列表
            // 实际上，由于Firebase Realtime DB的限制，我们无法直接获取所有用户列表
            // 在真实环境中，应该创建一个用户管理集合来存储用户信息
            
            // 临时解决方案：使用reports中的用户数据
            const usersTableBody = document.getElementById('usersTableBody');
            usersTableBody.innerHTML = '';
            
            // 先加载所有管理员用户
            adminUsersRef.once('value')
                .then((snapshot) => {
                    let adminUsers = {};
                    if (snapshot.exists()) {
                        adminUsers = snapshot.val();
                    }
                    
                    // 再加载所有封禁用户
                    return bannedUsersRef.once('value').then(bannedSnapshot => {
                        let bannedUsers = {};
                        if (bannedSnapshot.exists()) {
                            bannedUsers = bannedSnapshot.val();
                        }
                        
                        // 现在加载报告中的用户数据
                        return reportsRef.once('value').then(reportsSnapshot => {
                            const users = {};
                            
                            // 从报告中提取用户信息
                            if (reportsSnapshot.exists()) {
                                reportsSnapshot.forEach(report => {
                                    const reportData = report.val();
                                    if (reportData.userId) {
                                        if (!users[reportData.userId]) {
                                            users[reportData.userId] = {
                                                id: reportData.userId,
                                                name: reportData.userName || (currentLang === 'zh' ? '用户' : 'User'),
                                                isAdmin: adminUsers[reportData.userId] === true,
                                                isBanned: !!bannedUsers[reportData.userId],
                                                banInfo: bannedUsers[reportData.userId] || null
                                            };
                                        }
                                    }
                                });
                            }
                            
                            // 添加当前用户（如果不存在）
                            if (currentUserId && !users[currentUserId]) {
                                users[currentUserId] = {
                                    id: currentUserId,
                                    name: document.getElementById('userDisplayName').textContent,
                                    isAdmin: adminUsers[currentUserId] === true,
                                    isBanned: !!bannedUsers[currentUserId],
                                    banInfo: bannedUsers[currentUserId] || null
                                };
                            }
                            
                            // 将数据转换为数组
                            const usersArray = Object.values(users);
                            
                            // 按照管理员状态和ID排序
                            usersArray.sort((a, b) => {
                                if (a.isAdmin && !b.isAdmin) return -1;
                                if (!a.isAdmin && b.isAdmin) return 1;
                                return a.id.localeCompare(b.id);
                            });
                            
                            if (usersArray.length > 0) {
                                usersArray.forEach(user => {
                                    const row = document.createElement('tr');
                                    
                                    // ID列
                                    const idCell = document.createElement('td');
                                    idCell.textContent = user.id;
                                    row.appendChild(idCell);
                                    
                                    // 用户名列
                                    const nameCell = document.createElement('td');
                                    nameCell.textContent = user.name;
                                    row.appendChild(nameCell);
                                    
                                    // 状态列
                                    const statusCell = document.createElement('td');
                                    statusCell.textContent = user.isBanned ? 
                                        i18n[currentLang].banned : 
                                        i18n[currentLang].active;
                                    statusCell.style.color = user.isBanned ? '#ff3b30' : '#34c759';
                                    row.appendChild(statusCell);
                                    
                                    // 角色列
                                    const roleCell = document.createElement('td');
                                    roleCell.textContent = user.isAdmin ? 
                                        i18n[currentLang].admin : 
                                        i18n[currentLang].normalUser;
                                    if (user.isAdmin) {
                                        roleCell.style.fontWeight = 'bold';
                                        roleCell.style.color = '#ff9500';
                                    }
                                    row.appendChild(roleCell);
                                    
                                    // 操作列
                                    const actionCell = document.createElement('td');
                                    
                                    // 禁止对自己执行操作
                                    if (user.id !== currentUserId) {
                                        // 封禁/解封按钮
                                        const banBtn = document.createElement('button');
                                        if (user.isBanned) {
                                            banBtn.textContent = '🔓';
                                            banBtn.title = i18n[currentLang].unbanUser;
                                            banBtn.addEventListener('click', () => unbanUser(user.id));
                                        } else {
                                            banBtn.textContent = '🔒';
                                            banBtn.title = i18n[currentLang].banUser;
                                            banBtn.addEventListener('click', () => confirmBanUser(user.id, user.name));
                                        }
                                        banBtn.style.cssText = 'background:none;border:none;cursor:pointer;font-size:16px;padding:5px;';
                                        actionCell.appendChild(banBtn);
                                        
                                        // 管理员权限按钮
                                        const adminBtn = document.createElement('button');
                                        if (report.isAdmin) {
                                            adminBtn.textContent = '⬇️';
                                            adminBtn.title = i18n[currentLang].removeAdmin;
                                            adminBtn.addEventListener('click', () => removeAdminRole(report.userId));
                                        } else {
                                            adminBtn.textContent = '⬆️';
                                            adminBtn.title = i18n[currentLang].promoteAdmin;
                                            adminBtn.addEventListener('click', () => grantAdminRole(report.userId));
                                        }
                                        adminBtn.style.cssText = 'background:none;border:none;cursor:pointer;font-size:16px;padding:5px;';
                                        actionCell.appendChild(adminBtn);
                                    } else {
                                        actionCell.textContent = currentLang === 'zh' ? '（当前用户）' : '(Current User)';
                                        actionCell.style.color = '#999';
                                        actionCell.style.fontStyle = 'italic';
                                    }
                                    
                                    row.appendChild(actionCell);
                                    
                                    usersTableBody.appendChild(row);
                                });
                            } else {
                                const emptyRow = document.createElement('tr');
                                const emptyCell = document.createElement('td');
                                emptyCell.colSpan = 5;
                                emptyCell.textContent = currentLang === 'zh' ? '没有用户数据' : 'No users found';
                                emptyCell.style.textAlign = 'center';
                                emptyCell.style.padding = '20px';
                                emptyRow.appendChild(emptyCell);
                                usersTableBody.appendChild(emptyRow);
                            }
                        });
                    });
                })
                .catch((error) => {
                    console.error('加载用户列表出错:', error);
                    
                    const usersTableBody = document.getElementById('usersTableBody');
                    usersTableBody.innerHTML = '';
                    
                    const errorRow = document.createElement('tr');
                    const errorCell = document.createElement('td');
                    errorCell.colSpan = 5;
                    errorCell.textContent = currentLang === 'zh' ? '加载用户出错' : 'Error loading users';
                    errorCell.style.textAlign = 'center';
                    errorCell.style.padding = '20px';
                    errorCell.style.color = '#ff3b30';
                    errorRow.appendChild(errorCell);
                    usersTableBody.appendChild(errorRow);
                });
        }
        
        // 确认封禁用户
        function confirmBanUser(userId, userName) {
            if (!isCurrentUserAdmin || userId === currentUserId) return;
            
            // 创建确认弹窗
            const confirmDiv = document.createElement('div');
            confirmDiv.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background-color:rgba(40,40,40,0.95);border-radius:8px;padding:15px;width:80%;max-width:400px;text-align:center;box-shadow:0 4px 20px rgba(0,0,0,0.7);z-index:5002;';
            
            const confirmTitle = document.createElement('h3');
            confirmTitle.textContent = i18n[currentLang].banConfirm;
            confirmTitle.style.cssText = 'margin-bottom:15px;font-size:18px;';
            confirmDiv.appendChild(confirmTitle);
            
            const userInfo = document.createElement('p');
            userInfo.textContent = `${userName} (ID: ${userId})`;
            userInfo.style.cssText = 'margin-bottom:15px;font-size:14px;background-color:rgba(255,255,255,0.1);padding:8px;border-radius:4px;';
            confirmDiv.appendChild(userInfo);
            
            const reasonLabel = document.createElement('label');
            reasonLabel.textContent = currentLang === 'zh' ? '封禁原因:' : 'Ban Reason:';
            reasonLabel.style.cssText = 'display:block;text-align:left;margin-bottom:5px;font-size:14px;';
            confirmDiv.appendChild(reasonLabel);
            
            const reasonInput = document.createElement('textarea');
            reasonInput.style.cssText = 'width:100%;padding:8px;border-radius:4px;background-color:rgba(255,255,255,0.2);border:1px solid rgba(255,255,255,0.3);color:white;margin-bottom:15px;font-size:14px;min-height:60px;';
            confirmDiv.appendChild(reasonInput);
            
            const btnContainer = document.createElement('div');
            btnContainer.style.cssText = 'display:flex;justify-content:center;gap:15px;';
            
            // 确认按钮
            const confirmBtn = document.createElement('button');
            confirmBtn.textContent = i18n[currentLang].banUser;
            confirmBtn.style.cssText = 'padding:8px 16px;border-radius:4px;border:none;background-color:#e53935;color:white;cursor:pointer;';
            confirmBtn.onclick = function() {
                const reason = reasonInput.value.trim();
                banUser(userId, reason);
                confirmDiv.remove();
            };
            btnContainer.appendChild(confirmBtn);
            
            // 取消按钮
            const cancelBtn = document.createElement('button');
            cancelBtn.textContent = i18n[currentLang].cancel;
            cancelBtn.style.cssText = 'padding:8px 16px;border-radius:4px;border:none;background-color:#3a3a3c;color:white;cursor:pointer;';
            cancelBtn.onclick = function() {
                confirmDiv.remove();
            };
            btnContainer.appendChild(cancelBtn);
            
            confirmDiv.appendChild(btnContainer);
            
            // 添加到body
            document.body.appendChild(confirmDiv);
        }
        
        // 封禁用户
        function banUser(userId, reason) {
            if (!isCurrentUserAdmin || userId === currentUserId) return;
            
            const banInfo = {
                reason: reason || (currentLang === 'zh' ? '违反社区规则' : 'Violation of community rules'),
                time: new Date().toISOString(),
                bannedBy: document.getElementById('userDisplayName').textContent,
                bannedById: currentUserId
            };
            
            bannedUsersRef.child(userId).set(banInfo)
                .then(() => {
                    console.log('用户已封禁:', userId);
                    
                    // 重新加载用户列表
                    loadUsersForAdmin();
                    
                    // 删除该用户的所有标记
                    deleteAllUserMarkers(userId);
                    
                    // 发布临时公告
                    const adminName = document.getElementById('userDisplayName').textContent;
                    const announcement = currentLang === 'zh' 
                        ? `管理员 ${adminName} 已封禁用户 ID: ${userId}` 
                        : `Admin ${adminName} has banned user ID: ${userId}`;
                    
                    const announcementEl = document.createElement('div');
                    announcementEl.className = 'admin-announcement error';
                    
                    const contentEl = document.createElement('div');
                    contentEl.className = 'admin-announcement-content';
                    contentEl.textContent = announcement;
                    announcementEl.appendChild(contentEl);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        announcementEl.remove();
                    });
                    announcementEl.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(announcementEl);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(announcementEl)) {
                            announcementEl.remove();
                        }
                    }, 5000);
                })
                .catch((error) => {
                    console.error('封禁用户失败:', error);
                    alert(currentLang === 'zh' ? '封禁用户失败' : 'Failed to ban user');
                });
        }
        
        // 删除用户的所有标记和报告
        function deleteAllUserMarkers(userId) {
            if (!userId) return;
            
            console.log('正在删除用户所有标记:', userId);
            
            // 查询所有属于该用户的报告
            reportsRef.orderByChild('userId').equalTo(userId).once('value')
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        // 创建删除操作的批处理
                        const promises = [];
                        
                        snapshot.forEach((childSnapshot) => {
                            const report = childSnapshot.val();
                            const reportId = childSnapshot.key;
                            
                            console.log('删除用户报告:', reportId);
                            
                            // 添加删除操作到批处理
                            promises.push(reportsRef.child(reportId).remove());
                            
                            // 同时从地图上移除标记
                            const markerIndex = markers.findIndex(marker => 
                                marker.reportData && marker.reportData.id.toString() === reportId.toString()
                            );
                            
                            if (markerIndex !== -1) {
                                markers[markerIndex].setMap(null);
                                markers.splice(markerIndex, 1);
                            }
                        });
                        
                        // 执行所有删除操作
                        return Promise.all(promises);
                    }
                    return null;
                })
                .then(() => {
                    console.log('已删除用户所有报告和标记');
                    
                    // 发送通知
                    sendDanmaku(currentLang === 'zh' 
                        ? `已删除用户 ${userId} 的所有报告` 
                        : `All reports from user ${userId} have been deleted`
                    );
                })
                .catch((error) => {
                    console.error('删除用户报告失败:', error);
                });
        }
        
        // 解除用户封禁
        function unbanUser(userId) {
            if (!isCurrentUserAdmin) return;
            
            bannedUsersRef.child(userId).remove()
                .then(() => {
                    console.log('用户封禁已解除:', userId);
                    
                    // 重新加载用户列表
                    loadUsersForAdmin();
                    
                    // 发布临时公告
                    const adminName = document.getElementById('userDisplayName').textContent;
                    const announcement = currentLang === 'zh' 
                        ? `管理员 ${adminName} 已解除用户 ID: ${userId} 的封禁` 
                        : `Admin ${adminName} has unbanned user ID: ${userId}`;
                    
                    const announcementEl = document.createElement('div');
                    announcementEl.className = 'admin-announcement info';
                    
                    const contentEl = document.createElement('div');
                    contentEl.className = 'admin-announcement-content';
                    contentEl.textContent = announcement;
                    announcementEl.appendChild(contentEl);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        announcementEl.remove();
                    });
                    announcementEl.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(announcementEl);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(announcementEl)) {
                            announcementEl.remove();
                        }
                    }, 5000);
                })
                .catch((error) => {
                    console.error('解除用户封禁失败:', error);
                    alert(currentLang === 'zh' ? '解除封禁失败' : 'Failed to unban user');
                });
        }
        
        // 授予管理员权限
        function grantAdminRole(userId) {
            if (!isCurrentUserAdmin) return;
            
            adminUsersRef.child(userId).set(true)
                .then(() => {
                    console.log('已授予管理员权限:', userId);
                    
                    // 重新加载用户列表
                    loadUsersForAdmin();
                    
                    // 发布临时公告
                    const adminName = document.getElementById('userDisplayName').textContent;
                    const announcement = currentLang === 'zh' 
                        ? `用户 ID: ${userId} 已被 ${adminName} 提升为管理员` 
                        : `User ID: ${userId} has been promoted to admin by ${adminName}`;
                    
                    const announcementEl = document.createElement('div');
                    announcementEl.className = 'admin-announcement warning';
                    
                    const contentEl = document.createElement('div');
                    contentEl.className = 'admin-announcement-content';
                    contentEl.textContent = announcement;
                    announcementEl.appendChild(contentEl);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        announcementEl.remove();
                    });
                    announcementEl.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(announcementEl);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(announcementEl)) {
                            announcementEl.remove();
                        }
                    }, 5000);
                })
                .catch((error) => {
                    console.error('授予管理员权限失败:', error);
                    alert(currentLang === 'zh' ? '授予管理员权限失败' : 'Failed to grant admin role');
                });
        }
        
        // 移除管理员权限
        function removeAdminRole(userId) {
            if (!isCurrentUserAdmin) return;
            
            adminUsersRef.child(userId).remove()
                .then(() => {
                    console.log('已移除管理员权限:', userId);
                    
                    // 重新加载用户列表
                    loadUsersForAdmin();
                    
                    // 发布临时公告
                    const adminName = document.getElementById('userDisplayName').textContent;
                    const announcement = currentLang === 'zh' 
                        ? `用户 ID: ${userId} 的管理员权限已被 ${adminName} 移除` 
                        : `Admin privileges for user ID: ${userId} have been revoked by ${adminName}`;
                    
                    const announcementEl = document.createElement('div');
                    announcementEl.className = 'admin-announcement info';
                    
                    const contentEl = document.createElement('div');
                    contentEl.className = 'admin-announcement-content';
                    contentEl.textContent = announcement;
                    announcementEl.appendChild(contentEl);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        announcementEl.remove();
                    });
                    announcementEl.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(announcementEl);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(announcementEl)) {
                            announcementEl.remove();
                        }
                    }, 5000);
                })
                .catch((error) => {
                    console.error('移除管理员权限失败:', error);
                    alert(currentLang === 'zh' ? '移除管理员权限失败' : 'Failed to remove admin role');
                });
        }
        
        // 将公告作为弹幕发送
        function sendDanmaku(text) {
            // 限制长度，过长的文本会被截断
            const maxLength = 30;
            let danmakuText = text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
            
            // 如果文本为空，不显示弹幕
            if (!danmakuText.trim()) return;
            
            // 尝试根据当前语言进行翻译
            if (currentLang === 'en') {
                // 如果当前是英文界面，但内容包含中文字符，尝试转为英文
                if (/[\u4e00-\u9fa5]/.test(danmakuText)) {
                    // 简单的中英文关键词映射
                    const cnToEnMap = {
                        '狗': 'dog',
                        '猫': 'cat',
                        '你好': 'hello',
                        '交通': 'traffic',
                        '事故': 'accident',
                        '注意': 'attention',
                        '小心': 'caution',
                        '危险': 'danger',
                        '警告': 'warning',
                        '帮助': 'help',
                        '警察': 'police',
                        '紧急情况': 'emergency',
                        '拥挤': 'crowded',
                        '延误': 'delayed',
                        '取消': 'cancelled',
                        '关闭': 'closed',
                        '开放': 'open',
                        '正常': 'normal',
                        '服务': 'service',
                        '电车': 'tram',
                        '轨道': 'track',
                        '维修': 'maintenance',
                        '站': 'stop',
                        '临时': 'temporary',
                        '频率': 'frequency',
                        '高峰': 'peak',
                        '市中心': 'CBD',
                        '线': 'route',
                        '号线': 'route',
                        '游客': 'Guest',
                        '添加': 'Add',
                        '报告': 'Report',
                        '评论': 'Comment',
                        '欢迎': 'Welcome',
                        '使用': 'using',
                        '地图': 'map',
                        '系统': 'system'
                    };
                    
                    // 尝试替换中文关键词
                    for (const [cn, en] of Object.entries(cnToEnMap)) {
                        danmakuText = danmakuText.replace(new RegExp(cn, 'g'), en);
                    }
                    
                    // 对于常见的线路公告格式进行特殊处理
                    danmakuText = danmakuText.replace(/(\d+)号线/g, 'Route $1');
                }
            } else if (currentLang === 'zh') {
                // 如果当前是中文界面，但内容不包含中文字符，可能是英文
                if (!/[\u4e00-\u9fa5]/.test(danmakuText) && danmakuText.length > 5) {
                    // 这里可以添加英文到中文的简单转换，但默认保留英文也可以
                    // 简单处理Route格式
                    danmakuText = danmakuText.replace(/Route (\d+)/g, '$1号线');
                }
            }
            
            // 添加到队列
            danmakuQueue.push(danmakuText);
            
            // 如果弹幕系统未运行，启动它
            if (!danmakuRunning) {
                processDanmakuQueue();
            }
        }
        
        // 发布全局顶部公告
        function publishGlobalAnnouncement() {
            const announcementText = document.getElementById('announcementText').value.trim();
            if (!announcementText) return;
            
            // 更新全局公告栏
            const globalAnnouncementBar = document.getElementById('globalAnnouncementBar');
            const globalAnnouncementText = document.getElementById('globalAnnouncementText');
            
            globalAnnouncementText.textContent = announcementText;
            globalAnnouncementBar.style.display = 'block';
            
            // 保存到数据库
            const globalAnnouncement = {
                text: announcementText,
                time: new Date().toISOString(),
                userId: currentUserId,
                userName: document.getElementById('userDisplayName').textContent,
                active: true
            };
            
            database.ref('globalAnnouncement').set(globalAnnouncement)
                .then(() => {
                    console.log('全局公告已保存到数据库');
                })
                .catch((error) => {
                    console.error('保存全局公告出错:', error);
                });
            
            // 清空输入框
            document.getElementById('announcementText').value = '';
            
            // 将公告作为弹幕发送
            sendDanmaku(`📢 ${announcementText}`);
        }
        
        // 清除全局公告
        function clearGlobalAnnouncement() {
            // 隐藏全局公告栏
            const globalAnnouncementBar = document.getElementById('globalAnnouncementBar');
            globalAnnouncementBar.style.display = 'none';
            
            // 从数据库中删除全局公告
            database.ref('globalAnnouncement').remove()
                .then(() => {
                    console.log('全局公告已从数据库移除');
                })
                .catch((error) => {
                    console.error('移除全局公告出错:', error);
                });
        }
        
        // 加载全局公告
        function loadGlobalAnnouncement() {
            database.ref('globalAnnouncement').once('value')
                .then((snapshot) => {
                    if (snapshot.exists() && snapshot.val().active) {
                        const announcement = snapshot.val();
                        
                        // 显示全局公告
                        const globalAnnouncementBar = document.getElementById('globalAnnouncementBar');
                        const globalAnnouncementText = document.getElementById('globalAnnouncementText');
                        
                        globalAnnouncementText.textContent = announcement.text;
                        globalAnnouncementBar.style.display = 'block';
                    }
                })
                .catch((error) => {
                    console.error('加载全局公告出错:', error);
                });
        }
        
        // 移除管理员权限
        function removeAdminRole(userId) {
            if (!isCurrentUserAdmin) return;
            
            adminUsersRef.child(userId).remove()
                .then(() => {
                    console.log('已移除管理员权限:', userId);
                    
                    // 重新加载用户列表
                    loadUsersForAdmin();
                    
                    // 发布临时公告
                    const adminName = document.getElementById('userDisplayName').textContent;
                    const announcement = currentLang === 'zh' 
                        ? `用户 ID: ${userId} 的管理员权限已被 ${adminName} 移除` 
                        : `Admin privileges for user ID: ${userId} have been revoked by ${adminName}`;
                    
                    const announcementEl = document.createElement('div');
                    announcementEl.className = 'admin-announcement info';
                    
                    const contentEl = document.createElement('div');
                    contentEl.className = 'admin-announcement-content';
                    contentEl.textContent = announcement;
                    announcementEl.appendChild(contentEl);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        announcementEl.remove();
                    });
                    announcementEl.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(announcementEl);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(announcementEl)) {
                            announcementEl.remove();
                        }
                    }, 5000);
                })
                .catch((error) => {
                    console.error('移除管理员权限失败:', error);
                    alert(currentLang === 'zh' ? '移除管理员权限失败' : 'Failed to remove admin role');
                });
        }
        
        // 加载报告列表（管理员用）
        function loadReportsForAdmin() {
            reportsRef.orderByChild('time').once('value')
                .then((snapshot) => {
                    const reportsTableBody = document.getElementById('reportsTableBody');
                    reportsTableBody.innerHTML = '';
                    
                    if (snapshot.exists()) {
                        // 将数据转换为数组以便排序
                        const reports = [];
                        snapshot.forEach((childSnapshot) => {
                            reports.push({
                                id: childSnapshot.key,
                                ...childSnapshot.val()
                            });
                        });
                        
                        // 按时间倒序排序（最新的在前）
                        reports.sort((a, b) => new Date(b.time) - new Date(a.time));
                        
                        // 显示最近的50条报告
                        const recentReports = reports.slice(0, 50);
                        
                        recentReports.forEach((report) => {
                            const row = document.createElement('tr');
                            
                            // ID列
                            const idCell = document.createElement('td');
                            idCell.textContent = report.id;
                            row.appendChild(idCell);
                            
                            // 时间列
                            const timeCell = document.createElement('td');
                            timeCell.textContent = new Date(report.time).toLocaleString();
                            row.appendChild(timeCell);
                            
                            // 用户列
                            const userCell = document.createElement('td');
                            userCell.textContent = report.userName || (currentLang === 'zh' ? '用户' : 'User');
                            row.appendChild(userCell);
                            
                            // 描述列
                            const descCell = document.createElement('td');
                            descCell.textContent = report.description ? 
                                (report.description.length > 30 ? report.description.substring(0, 30) + '...' : report.description) : 
                                (currentLang === 'zh' ? '无描述' : 'No description');
                            row.appendChild(descCell);
                            
                            // 操作列
                            const actionCell = document.createElement('td');
                            
                            // 查看按钮
                            const viewBtn = document.createElement('button');
                            viewBtn.textContent = '👁️';
                            viewBtn.title = currentLang === 'zh' ? '查看' : 'View';
                            viewBtn.style.cssText = 'background:none;border:none;cursor:pointer;font-size:16px;padding:5px;';
                            viewBtn.addEventListener('click', () => {
                                // 传递报告数据给showReportDetails
                                showReportDetails(report);
                            });
                            actionCell.appendChild(viewBtn);
                            
                            // 删除按钮
                            const deleteBtn = document.createElement('button');
                            deleteBtn.textContent = '🗑️';
                            deleteBtn.title = currentLang === 'zh' ? '删除' : 'Delete';
                            deleteBtn.style.cssText = 'background:none;border:none;cursor:pointer;font-size:16px;padding:5px;color:#ff3b30;';
                            deleteBtn.addEventListener('click', () => {
                                confirmDeleteReportAdmin(report.id);
                            });
                            actionCell.appendChild(deleteBtn);
                            
                            row.appendChild(actionCell);
                            
                            reportsTableBody.appendChild(row);
                        });
                    } else {
                        const emptyRow = document.createElement('tr');
                        const emptyCell = document.createElement('td');
                        emptyCell.colSpan = 5;
                        emptyCell.textContent = currentLang === 'zh' ? '没有报告数据' : 'No reports found';
                        emptyCell.style.textAlign = 'center';
                        emptyCell.style.padding = '20px';
                        emptyRow.appendChild(emptyCell);
                        reportsTableBody.appendChild(emptyRow);
                    }
                })
                .catch((error) => {
                    console.error('加载报告列表出错:', error);
                    
                    const reportsTableBody = document.getElementById('reportsTableBody');
                    reportsTableBody.innerHTML = '';
                    
                    const errorRow = document.createElement('tr');
                    const errorCell = document.createElement('td');
                    errorCell.colSpan = 5;
                    errorCell.textContent = currentLang === 'zh' ? '加载报告出错' : 'Error loading reports';
                    errorCell.style.textAlign = 'center';
                    errorCell.style.padding = '20px';
                    errorCell.style.color = '#ff3b30';
                    errorRow.appendChild(errorCell);
                    reportsTableBody.appendChild(errorRow);
                });
        }
        
        // 确认删除报告（管理员）
        function confirmDeleteReportAdmin(reportId) {
            if (!isCurrentUserAdmin) return;
            
            // 创建确认弹窗
            const confirmDiv = document.createElement('div');
            confirmDiv.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background-color:rgba(40,40,40,0.95);border-radius:8px;padding:15px;width:80%;max-width:400px;text-align:center;box-shadow:0 4px 20px rgba(0,0,0,0.7);z-index:5002;'; // 修改z-index为5002，高于管理员面板的5000
            
            const confirmText = document.createElement('p');
            confirmText.textContent = i18n[currentLang].confirmDelete;
            confirmText.style.cssText = 'margin-bottom:15px;font-size:16px;';
            confirmDiv.appendChild(confirmText);
            
            const btnContainer = document.createElement('div');
            btnContainer.style.cssText = 'display:flex;justify-content:center;gap:15px;';
            
            // 确认按钮
            const yesBtn = document.createElement('button');
            yesBtn.textContent = i18n[currentLang].yes;
            yesBtn.style.cssText = 'padding:8px 16px;border-radius:4px;border:none;background-color:#e53935;color:white;cursor:pointer;';
            yesBtn.onclick = function() {
                deleteReportAdmin(reportId);
                confirmDiv.remove();
            };
            btnContainer.appendChild(yesBtn);
            
            // 取消按钮
            const noBtn = document.createElement('button');
            noBtn.textContent = i18n[currentLang].no;
            noBtn.style.cssText = 'padding:8px 16px;border-radius:4px;border:none;background-color:#3a3a3c;color:white;cursor:pointer;';
            noBtn.onclick = function() {
                confirmDiv.remove();
            };
            btnContainer.appendChild(noBtn);
            
            confirmDiv.appendChild(btnContainer);
            
            // 添加到body
            document.body.appendChild(confirmDiv);
        }
        
        // 管理员删除报告
        function deleteReportAdmin(reportId) {
            if (!isCurrentUserAdmin) return;
            
            reportsRef.child(reportId.toString()).remove()
                .then(() => {
                    console.log('管理员删除报告成功:', reportId);
                    
                    // 重新加载报告列表
                    loadReportsForAdmin();
                    
                    // 删除对应的标记
                    const markerIndex = markers.findIndex(marker => marker.reportData && marker.reportData.id == reportId);
                    if (markerIndex !== -1) {
                        markers[markerIndex].setMap(null);
                        markers.splice(markerIndex, 1);
                    }
                    
                    // 发布临时公告
                    const adminName = document.getElementById('userDisplayName').textContent;
                    const announcement = currentLang === 'zh' 
                        ? `管理员 ${adminName} 已删除报告 ID: ${reportId}` 
                        : `Admin ${adminName} has deleted report ID: ${reportId}`;
                    
                    const announcementEl = document.createElement('div');
                    announcementEl.className = 'admin-announcement info';
                    
                    const contentEl = document.createElement('div');
                    contentEl.className = 'admin-announcement-content';
                    contentEl.textContent = announcement;
                    announcementEl.appendChild(contentEl);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        announcementEl.remove();
                    });
                    announcementEl.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(announcementEl);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(announcementEl)) {
                            announcementEl.remove();
                        }
                    }, 5000);
                })
                .catch((error) => {
                    console.error('管理员删除报告失败:', error);
                    
                    // 显示错误消息
                    const errorAnnouncement = document.createElement('div');
                    errorAnnouncement.className = 'admin-announcement error';
                    
                    const errorContent = document.createElement('div');
                    errorContent.className = 'admin-announcement-content';
                    errorContent.textContent = currentLang === 'zh' 
                        ? '删除报告失败: ' + error.message 
                        : 'Failed to delete report: ' + error.message;
                    errorAnnouncement.appendChild(errorContent);
                    
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'admin-announcement-close';
                    closeBtn.innerHTML = '&times;';
                    closeBtn.addEventListener('click', function() {
                        errorAnnouncement.remove();
                    });
                    errorAnnouncement.appendChild(closeBtn);
                    
                    // 添加到页面
                    document.body.appendChild(errorAnnouncement);
                    
                    // 5秒后自动消失
                    setTimeout(() => {
                        if (document.body.contains(errorAnnouncement)) {
                            errorAnnouncement.remove();
                        }
                    }, 5000);
                });
        }
    </script>
    
    <!-- 添加Google Maps API -->
    <script>
        // Google Maps API 加载回调
        function googleMapsLoadedCallback() {
            console.log("Google Maps 已加载，初始化地图...");
            
            // 如果initMap函数存在，调用它
            if (typeof initMap === 'function') {
                initMap();
            }
            
            // 只有当addRefreshTramButton函数存在时才调用它
            if (typeof addRefreshTramButton === 'function') {
                addRefreshTramButton();
            }
        }
    </script>
    <script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCE-oMIlcnOeqplgMmL9y1qcU6A9-HBu9U&callback=googleMapsLoadedCallback&libraries=places,visualization&v=weekly" onerror="console.error('Google Maps 加载失败')"></script>
    
    <!-- DOM就绪后初始化 -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM已加载，检查登录状态...");
            
            // 首先检查用户是否已登录，如果未登录则重定向到登录页面
            const userLoggedIn = localStorage.getItem('userLoggedIn') === 'true';
            if (!userLoggedIn) {
                console.log('用户未登录，重定向到登录页...');
                window.location.href = 'login.html';
                return;
            }
            
            console.log("用户已登录，等待Google Maps API回调...");
            
            // 初始化Firebase到Cloudflare同步系统
            if (typeof window.firebaseCloudflareSync !== 'undefined') {
                console.log('初始化Firebase到Cloudflare同步系统...');
                window.firebaseCloudflareSync.init();
            }
            
            // 关闭报告计数器弹窗按钮事件
            document.getElementById('closeCounterPopup').addEventListener('click', function() {
                closeReportCounterPopup();
            });
            
            // 添加报告按钮事件
            document.getElementById('addReportBtn').addEventListener('click', function(e) {
                e.preventDefault();
                if (isSelectingLocation) return;
                
                isSelectingLocation = true;
                document.getElementById('addReportTip').style.display = 'inline';
                document.getElementById('addReportTip').textContent = i18n[currentLang].selectLocation;
                document.getElementById('addReportBtn').textContent = i18n[currentLang].selecting;
                document.body.style.cursor = 'crosshair';
            });
            
            // 语言切换按钮事件
            document.getElementById('langSwitchBtn').addEventListener('click', function() {
                // 切换语言
                currentLang = currentLang === 'zh' ? 'en' : 'zh';
                
                // 更新界面文本
                updateFormLanguage();
                
                // 更新语言切换按钮文本
                document.getElementById('langSwitchText').textContent = currentLang === 'zh' ? 'EN' : '中';
                
                // 存储语言设置
                localStorage.setItem('language', currentLang);
                
                // 更新刷新电车按钮文本
                document.getElementById('refreshTramText').textContent = i18n[currentLang].refreshTramInfo;
                
                // 如果是游客模式，更新游客显示标签
                if (localStorage.getItem('isGuestUser') === 'true') {
                    document.getElementById('userDisplayName').textContent = currentLang === 'zh' ? '游客' : 'Guest';
                }
                
                // 重新初始化弹幕系统，使其使用当前语言
                initDanmakuSystem();
                
                console.log('语言已切换为:', currentLang);
            });
            
            // 表单关闭按钮事件
            document.getElementById('formClose').addEventListener('click', function() {
                closeReportForm();
            });
            
            // 取消按钮事件
            document.getElementById('cancelReport').addEventListener('click', function() {
                closeReportForm();
            });
            
            // 重新选点按钮事件
            document.getElementById('resetLocationBtn').addEventListener('click', function() {
                closeReportForm();
                
                // 延迟一点启动选点模式，让表单有时间关闭
                setTimeout(function() {
                    isSelectingLocation = true;
                    document.getElementById('addReportTip').style.display = 'inline';
                    document.getElementById('addReportTip').textContent = i18n[currentLang].selectLocation;
                    document.getElementById('addReportBtn').textContent = i18n[currentLang].selecting;
                    document.body.style.cursor = 'crosshair';
                }, 300);
            });
            
            // 根据描述定位按钮事件
            document.getElementById('geocodeLocationBtn').addEventListener('click', function() {
                geocodeDescription();
            });
            
            // 获取当前位置按钮事件
            document.getElementById('currentLocationBtn').addEventListener('click', function() {
                getCurrentLocation();
            });
            
            // 图片预览
            document.getElementById('imageInput').addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        document.getElementById('previewImg').src = e.target.result;
                        document.getElementById('previewImg').style.display = 'block';
                        document.getElementById('imagePlaceholder').style.display = 'none';
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // 为描述输入框添加回车键事件，自动触发地理编码
            document.getElementById('descriptionInput').addEventListener('keydown', function(e) {
                // 当按下Ctrl+Enter或Command+Enter时触发地理编码
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    e.preventDefault(); // 阻止默认行为
                    geocodeDescription();
                }
            });
            
            // 提交报告
            document.getElementById('submitReport').addEventListener('click', function() {
                const description = document.getElementById('descriptionInput').value.trim();
                if (!description) {
                    alert('请输入描述');
                    return;
                }
                
                if (!selectedLocation) {
                    alert('请先在地图上选择位置');
                    closeReportForm();
                    return;
                }
                
                let imageData = '';
                if (document.getElementById('previewImg').style.display !== 'none') {
                    imageData = document.getElementById('previewImg').src;
                }
                
                addNewReport(description, imageData, selectedLocation.lat, selectedLocation.lng);
            });
            
            // 更新表单语言文本
            function updateFormLanguage() {
                document.getElementById('formTitle').textContent = i18n[currentLang].newReport;
                document.getElementById('photoLabel').textContent = i18n[currentLang].photo;
                document.getElementById('imagePlaceholder').textContent = i18n[currentLang].imagePlaceholder;
                document.getElementById('descLabel').textContent = i18n[currentLang].description;
                document.getElementById('descriptionInput').placeholder = i18n[currentLang].descriptionPlaceholder;
                document.getElementById('submitReport').textContent = i18n[currentLang].submit;
                document.getElementById('resetLocationBtn').textContent = i18n[currentLang].resetLocation;
                document.getElementById('cancelReport').textContent = i18n[currentLang].cancel;
                document.getElementById('addReportBtn').textContent = i18n[currentLang].addReport;
                document.getElementById('geocodeLocationBtn').textContent = i18n[currentLang].geocodeLocation;
                document.getElementById('currentLocationBtn').textContent = i18n[currentLang].useCurrentLocation;
                
                // 更新用户菜单
                document.getElementById('profileMenuItem').textContent = i18n[currentLang].profile;
                document.getElementById('logoutMenuItem').textContent = i18n[currentLang].logout;
            }
            
            // 设置语言函数扩展
            window.setLang = function(lang) {
                currentLang = lang;
                updateFormLanguage();
                document.getElementById('langSwitchText').textContent = currentLang === 'zh' ? 'EN' : '中';
                // 其他语言更新逻辑
            };
            
            // 初始化表单语言
            updateFormLanguage();
            
            // 初始化弹幕系统
            initDanmakuSystem();
            
            // 设置用户菜单事件
            document.getElementById('userDisplayName').addEventListener('click', function() {
                const userMenuDropdown = document.getElementById('userMenuDropdown');
                if (userMenuDropdown.style.display === 'block') {
                    userMenuDropdown.style.display = 'none';
                } else {
                    userMenuDropdown.style.display = 'block';
                }
            });
            
            // 设置登出按钮事件
            document.getElementById('logoutMenuItem').addEventListener('click', function() {
                // 清除登录状态
                localStorage.removeItem('userLoggedIn');
                localStorage.removeItem('userEmail');
                localStorage.removeItem('isGuestUser');
                localStorage.removeItem('guestId');
                
                // Firebase登出
                if (auth) {
                    auth.signOut().then(() => {
                        console.log('用户已登出Firebase');
                    }).catch((error) => {
                        console.error('Firebase登出错误:', error);
                    });
                }
                
                // 重定向到登录页面，添加登出标记
                window.location.href = 'login.html?logout=1';
            });
            
            // 点击页面其他位置关闭用户菜单
            document.addEventListener('click', function(e) {
                const userMenu = document.getElementById('userMenu');
                const userMenuDropdown = document.getElementById('userMenuDropdown');
                
                if (!userMenu.contains(e.target) && userMenuDropdown.style.display === 'block') {
                    userMenuDropdown.style.display = 'none';
                }
            });
            
            // 初始化语言设置
            const savedLang = localStorage.getItem('language') || localStorage.getItem('preferredLanguage');
            if (savedLang) {
                currentLang = savedLang;
                document.getElementById('langSwitchText').textContent = currentLang === 'zh' ? 'EN' : '中';
                updateFormLanguage();
                
                // 如果是游客模式，根据恢复的语言更新游客显示标签
                if (localStorage.getItem('isGuestUser') === 'true') {
                    document.getElementById('userDisplayName').textContent = currentLang === 'zh' ? '游客' : 'Guest';
                }
                
                // 确保弹幕使用正确的语言
                initDanmakuSystem();
                
                // 刷新电车按钮文本
                const refreshTramText = document.getElementById('refreshTramText');
                if (refreshTramText) {
                    refreshTramText.textContent = i18n[currentLang].refreshTramInfo;
                }
            }
            
            // 管理员面板事件监听
            // 关闭管理员面板
            document.getElementById('adminPanelClose').addEventListener('click', function() {
                closeAdminPanel();
            });
            
            // 发布临时公告
            document.getElementById('publishAnnouncement').addEventListener('click', function() {
                publishTemporaryAnnouncement();
            });
            
            // 发布全局顶部公告
            document.getElementById('publishGlobalAnnouncement').addEventListener('click', function() {
                publishGlobalAnnouncement();
            });
            
            // 清除全局公告
            document.getElementById('clearGlobalAnnouncement').addEventListener('click', function() {
                clearGlobalAnnouncement();
            });
            
            // 刷新报告列表
            document.getElementById('refreshReportsBtn').addEventListener('click', function() {
                loadReportsForAdmin();
            });
            
            // 报告过滤
            document.getElementById('reportsFilter').addEventListener('input', function() {
                const filterText = this.value.toLowerCase();
                const rows = document.getElementById('reportsTableBody').getElementsByTagName('tr');
                
                for (let i = 0; i < rows.length; i++) {
                    const descCell = rows[i].getElementsByTagName('td')[3]; // 描述列是第4列
                    if (descCell) {
                        const descText = descCell.textContent.toLowerCase();
                        if (descText.includes(filterText)) {
                            rows[i].style.display = '';
                        } else {
                            rows[i].style.display = 'none';
                        }
                    }
                }
            });
            
            // 刷新用户列表
            document.getElementById('refreshUsersBtn').addEventListener('click', function() {
                loadUsersForAdmin();
            });
            
            // 封禁用户
            document.getElementById('banUserBtn').addEventListener('click', function() {
                const userId = document.getElementById('userIdInput').value.trim();
                if (userId) {
                    confirmBanUser(userId, userId);
                }
            });
            
            // 解除封禁
            document.getElementById('unbanUserBtn').addEventListener('click', function() {
                const userId = document.getElementById('userIdInput').value.trim();
                if (userId) {
                    unbanUser(userId);
                }
            });
            
            // 提升为管理员
            document.getElementById('promoteToAdminBtn').addEventListener('click', function() {
                const userId = document.getElementById('userIdInput').value.trim();
                if (userId) {
                    grantAdminRole(userId);
                }
            });
            
            // 移除管理员权限
            document.getElementById('removeAdminBtn').addEventListener('click', function() {
                const userId = document.getElementById('userIdInput').value.trim();
                if (userId) {
                    removeAdminRole(userId);
                }
            });
            
            // 加载全局公告
            loadGlobalAnnouncement();
            
            // 初始化用户认证（移到这里，确保在所有函数定义之后调用）
            checkAuthState();
            
            // 根据描述定位
            function geocodeDescription() {
                const description = document.getElementById('descriptionInput').value.trim();
                if (!description) {
                    alert(currentLang === 'zh' ? '请先输入描述' : 'Please enter a description first');
                    return;
                }
                
                // 显示定位状态
                const geocodeStatus = document.getElementById('geocodeStatus');
                geocodeStatus.textContent = i18n[currentLang].geocoding;
                geocodeStatus.style.display = 'block';
                geocodeStatus.style.color = '#ffcc00';

                // 在墨尔本区域内进行地理编码查询
                const geocoder = new google.maps.Geocoder();
                // 添加墨尔本作为偏好地点
                let searchQuery = description + ' Melbourne Australia';
                
                // 对于中文描述，添加翻译
                if (/[\u4e00-\u9fa5]/.test(description)) {
                    // 简单的常见地点中英文映射
                    const cnToEnMap = {
                        '墨尔本': 'Melbourne',
                        '中央商务区': 'CBD',
                        '南岸': 'Southbank',
                        '圣基尔达': 'St Kilda',
                        '卡尔顿': 'Carlton',
                        '菲茨罗伊': 'Fitzroy',
                        '多克兰兹': 'Docklands',
                        '火车站': 'Train Station',
                        '商场': 'Shopping Centre',
                        '图书馆': 'Library',
                        '大学': 'University',
                        '医院': 'Hospital',
                        '公园': 'Park',
                        '湖': 'Lake',
                        '河': 'River',
                        '广场': 'Square',
                        '街': 'Street',
                        '路': 'Road',
                        '大道': 'Avenue'
                    };
                    
                    // 尝试替换中文关键词
                    for (const [cn, en] of Object.entries(cnToEnMap)) {
                        if (description.includes(cn)) {
                            searchQuery = description.replace(cn, en) + ' Melbourne Australia';
                            break;
                        }
                    }
                }
                
                geocoder.geocode({
                    'address': searchQuery,
                    'bounds': new google.maps.LatLngBounds(
                        // 墨尔本区域大致边界
                        new google.maps.LatLng(-38.0, 144.5),
                        new google.maps.LatLng(-37.5, 145.5)
                    )
                }, (results, status) => {
                    if (status === 'OK' && results[0]) {
                        const location = results[0].geometry.location;
                        selectedLocation = {
                            lat: location.lat(),
                            lng: location.lng()
                        };
                        
                        // 在地图上添加标记（传入true表示这是地理编码结果）
                        addSelectionMarker(selectedLocation, true);
                        
                        // 移动地图到该位置
                        map.setCenter(selectedLocation);
                        map.setZoom(16);
                        
                        // 更新状态显示
                        geocodeStatus.textContent = i18n[currentLang].geocodeSuccess;
                        geocodeStatus.style.color = '#34c759';
                        
                        // 3秒后隐藏状态
                        setTimeout(() => {
                            geocodeStatus.style.display = 'none';
                        }, 3000);
                        
                        // 向用户发送弹幕反馈
                        sendDanmaku(currentLang === 'zh' ? 
                            i18n.zh.addedMarkerFromDesc.replace('{desc}', description) : 
                            i18n.en.addedMarkerFromDesc.replace('{desc}', description)
                        );
                        
                        // 自动打开报告表单
                        openReportForm();
                    } else {
                        // 地理编码失败，回退到使用预设的地点坐标
                        geocodeStatus.textContent = i18n[currentLang].geocodeError;
                        geocodeStatus.style.color = '#ff9500'; // 改为警告色
                        
                        // 向用户发送弹幕提示
                        sendDanmaku(currentLang === 'zh' ? 
                            '地理编码失败，尝试使用预设位置匹配...' : 
                            'Geocoding failed, trying to match with preset locations...'
                        );
                        
                        // 使用预设位置字典作为备选方案
                        const melbourneLocations = {
                            // 墨尔本中央商务区
                            'cbd': { lat: -37.8136, lng: 144.9631 },
                            'melbourne cbd': { lat: -37.8136, lng: 144.9631 },
                            '墨尔本中央商务区': { lat: -37.8136, lng: 144.9631 },
                            '中央商务区': { lat: -37.8136, lng: 144.9631 },

                            // 墨尔本大学
                            'melbourne university': { lat: -37.7963, lng: 144.9614 },
                            '墨尔本大学': { lat: -37.7963, lng: 144.9614 },
                            '大学': { lat: -37.7963, lng: 144.9614 },

                            // 南岸
                            'southbank': { lat: -37.8217, lng: 144.9647 },
                            '南岸': { lat: -37.8217, lng: 144.9647 },

                            // 圣基尔达
                            'st kilda': { lat: -37.8680, lng: 144.9809 },
                            'st. kilda': { lat: -37.8680, lng: 144.9809 },
                            '圣基尔达': { lat: -37.8680, lng: 144.9809 },

                            // 卡尔顿
                            'carlton': { lat: -37.8008, lng: 144.9675 },
                            '卡尔顿': { lat: -37.8008, lng: 144.9675 },

                            // 菲茨罗伊
                            'fitzroy': { lat: -37.7989, lng: 144.9774 },
                            '菲茨罗伊': { lat: -37.7989, lng: 144.9774 },

                            // 多克兰兹
                            'docklands': { lat: -37.8153, lng: 144.9457 },
                            '多克兰兹': { lat: -37.8153, lng: 144.9457 },

                            // 佛林德斯街车站
                            'flinders street station': { lat: -37.8183, lng: 144.9671 },
                            '佛林德斯街车站': { lat: -37.8183, lng: 144.9671 },
                            'flinders': { lat: -37.8183, lng: 144.9671 },

                            // 南十字星车站
                            'southern cross station': { lat: -37.8183, lng: 144.9527 },
                            '南十字星车站': { lat: -37.8183, lng: 144.9527 },
                            
                            // 默认位置 - 墨尔本中心
                            'default': MELBOURNE_CENTER
                        };
                        
                        // 转换描述为小写以便匹配
                        const lowerDescription = description.toLowerCase();
                        
                        // 尝试查找匹配的位置
                        let matchedLocation = null;
                        
                        // 检查是否有精确匹配
                        Object.keys(melbourneLocations).forEach(key => {
                            if (lowerDescription.includes(key)) {
                                matchedLocation = melbourneLocations[key];
                            }
                        });
                        
                        // 如果没有找到匹配，使用默认位置
                        if (!matchedLocation) {
                            // 发送一个提示，告知用户使用了默认位置
                            sendDanmaku(currentLang === 'zh' ? 
                                '未找到精确匹配，使用墨尔本中心位置' : 
                                'No exact match found, using Melbourne center'
                            );
                            matchedLocation = melbourneLocations.default;
                        } else {
                            // 已找到预设位置匹配
                            geocodeStatus.textContent = i18n[currentLang].geocodeSuccess;
                            geocodeStatus.style.color = '#34c759';
                            
                            sendDanmaku(currentLang === 'zh' ? 
                                i18n.zh.usePresetLocation : 
                                i18n.en.usePresetLocation
                            );
                        }
                        
                        // 设置选定位置
                        selectedLocation = matchedLocation;
                        
                        // 在地图上添加标记
                        addSelectionMarker(selectedLocation, true);
                        
                        // 移动地图到该位置
                        map.setCenter(selectedLocation);
                        map.setZoom(16);
                        
                        // 3秒后隐藏状态
                        setTimeout(() => {
                            geocodeStatus.style.display = 'none';
                        }, 3000);
                        
                        // 自动打开报告表单
                        openReportForm();
                        
                        // 记录地理编码失败原因，用于调试
                        console.error('Geocode failed:', status);
                    }
                });
            }
            
            // 获取当前位置
            function getCurrentLocation() {
                // 检查浏览器是否支持地理位置
                if (!navigator.geolocation) {
                    alert(currentLang === 'zh' ? '您的浏览器不支持地理位置功能' : 'Your browser does not support geolocation');
                    return;
                }
                
                // 显示状态
                const geocodeStatus = document.getElementById('geocodeStatus');
                geocodeStatus.textContent = i18n[currentLang].gettingLocation;
                geocodeStatus.style.display = 'block';
                geocodeStatus.style.color = '#ffcc00';
                
                // 使用地理位置API获取当前位置
                navigator.geolocation.getCurrentPosition(
                    // 成功回调
                    function(position) {
                        selectedLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        
                        // 限制在墨尔本区域内
                        const melbourneBounds = {
                            north: -37.5,
                            south: -38.0,
                            east: 145.5,
                            west: 144.5
                        };
                        
                        const inMelbourneBounds = selectedLocation.lat >= melbourneBounds.south && 
                                                 selectedLocation.lat <= melbourneBounds.north && 
                                                 selectedLocation.lng >= melbourneBounds.west && 
                                                 selectedLocation.lng <= melbourneBounds.east;
                        
                        // 如果不在墨尔本范围内，默认使用墨尔本中心位置
                        if (!inMelbourneBounds) {
                            sendDanmaku(currentLang === 'zh' ? 
                                '您似乎不在墨尔本区域，已默认使用墨尔本中心位置' : 
                                'You seem to be outside Melbourne area, using Melbourne center instead'
                            );
                            selectedLocation = MELBOURNE_CENTER;
                        }
                        
                        // 在地图上添加标记
                        addSelectionMarker(selectedLocation, true);
                        
                        // 移动地图到该位置
                        map.setCenter(selectedLocation);
                        map.setZoom(16);
                        
                        // 更新状态显示
                        geocodeStatus.textContent = i18n[currentLang].locationSuccess;
                        geocodeStatus.style.color = '#34c759';
                        
                        // 3秒后隐藏状态
                        setTimeout(() => {
                            geocodeStatus.style.display = 'none';
                        }, 3000);
                        
                        // 向用户发送弹幕反馈
                        sendDanmaku(currentLang === 'zh' ? 
                            '已获取当前位置' : 
                            'Current location obtained'
                        );
                        
                        // 自动打开报告表单
                        openReportForm();
                    },
                    // 错误回调
                    function(error) {
                        console.error('获取位置错误:', error);
                        
                        // 更新状态显示
                        geocodeStatus.textContent = i18n[currentLang].locationError;
                        geocodeStatus.style.color = '#ff3b30';
                        
                        // 5秒后隐藏状态
                        setTimeout(() => {
                            geocodeStatus.style.display = 'none';
                        }, 5000);
                        
                        // 错误处理
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                alert(currentLang === 'zh' ? '用户拒绝了地理位置请求' : 'User denied the geolocation request');
                                break;
                            case error.POSITION_UNAVAILABLE:
                                alert(currentLang === 'zh' ? '位置信息不可用' : 'Location information is unavailable');
                                break;
                            case error.TIMEOUT:
                                alert(currentLang === 'zh' ? '获取用户位置超时' : 'The request to get user location timed out');
                                break;
                            case error.UNKNOWN_ERROR:
                                alert(currentLang === 'zh' ? '发生未知错误' : 'An unknown error occurred');
                                break;
                        }
                    },
                    // 选项
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );
            }
        });
    </script>
    
    <!-- 管理员面板 -->
    <div id="adminPanel" class="admin-panel">
        <div class="admin-header">
            <h2 class="admin-title" id="adminPanelTitle">管理员控制面板</h2>
            <button id="adminPanelClose" class="admin-close">&times;</button>
        </div>
        
        <!-- 全局公告部分 -->
        <div class="admin-section">
            <h3 class="admin-section-title" id="adminAnnouncementTitle">发布全局公告</h3>
            <div style="margin-bottom:15px;">
                <label style="display:block;margin-bottom:5px;color:#ddd;" id="adminAnnouncementLabel">公告内容</label>
                <textarea id="announcementText" class="admin-input" style="height:80px;resize:vertical;" placeholder="输入要发布的公告内容..."></textarea>
            </div>
            <div style="margin-bottom:15px;">
                <label style="display:block;margin-bottom:5px;color:#ddd;" id="adminAnnouncementTypeLabel">公告类型</label>
                <select id="announcementType" class="admin-input">
                    <option value="warning">警告 (黄色)</option>
                    <option value="error">紧急 (红色)</option>
                    <option value="info">信息 (蓝色)</option>
                </select>
            </div>
            <div style="display:flex;gap:10px;">
                <button id="publishAnnouncement" class="admin-button warning">发布临时公告</button>
                <button id="publishGlobalAnnouncement" class="admin-button danger">发布全局顶部公告</button>
                <button id="clearGlobalAnnouncement" class="admin-button">清除全局公告</button>
            </div>
        </div>
        
        <!-- 报告管理部分 -->
        <div class="admin-section">
            <h3 class="admin-section-title" id="adminReportsTitle">报告管理</h3>
            <div style="margin-bottom:15px;">
                <label style="display:block;margin-bottom:5px;color:#ddd;" id="adminReportsFilterLabel">过滤条件</label>
                <input type="text" id="reportsFilter" class="admin-input" placeholder="按描述内容过滤...">
            </div>
            <div id="reportsTableContainer" style="max-height:300px;overflow-y:auto;margin-bottom:15px;">
                <table class="admin-table" id="reportsTable">
                    <thead>
                        <tr>
                            <th id="reportIdHeader">ID</th>
                            <th id="reportTimeHeader">时间</th>
                            <th id="reportUserHeader">用户</th>
                            <th id="reportDescHeader">描述</th>
                            <th id="reportActionsHeader">操作</th>
                        </tr>
                    </thead>
                    <tbody id="reportsTableBody">
                        <!-- 由JavaScript动态填充 -->
                    </tbody>
                </table>
            </div>
            <button id="refreshReportsBtn" class="admin-button">刷新报告列表</button>
        </div>
        
        <!-- 用户管理部分 -->
        <div class="admin-section">
            <h3 class="admin-section-title" id="adminUsersTitle">用户管理</h3>
            <div style="margin-bottom:15px;">
                <label style="display:block;margin-bottom:5px;color:#ddd;" id="adminUserManageLabel">用户ID或邮箱</label>
                <input type="text" id="userIdInput" class="admin-input" placeholder="输入用户ID或邮箱...">
            </div>
            <div style="display:flex;gap:10px;margin-bottom:15px;">
                <button id="banUserBtn" class="admin-button danger">封禁用户</button>
                <button id="unbanUserBtn" class="admin-button">解除封禁</button>
                <button id="promoteToAdminBtn" class="admin-button warning">提升为管理员</button>
                <button id="removeAdminBtn" class="admin-button">移除管理员权限</button>
            </div>
            <div id="usersTableContainer" style="max-height:300px;overflow-y:auto;">
                <table class="admin-table" id="usersTable">
                    <thead>
                        <tr>
                            <th id="userIdHeader">用户ID</th>
                            <th id="userNameHeader">用户名</th>
                            <th id="userStatusHeader">状态</th>
                            <th id="userRoleHeader">角色</th>
                            <th id="userActionsHeader">操作</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- 由JavaScript动态填充 -->
                    </tbody>
                </table>
            </div>
            <button id="refreshUsersBtn" class="admin-button" style="margin-top:15px;">刷新用户列表</button>
        </div>
    </div>
    
    <!-- 全局顶部公告栏 -->
    <div id="globalAnnouncementBar" class="global-announcement-bar" style="display:none;">
        <span id="globalAnnouncementText"></span>
    </div>
    
    <script>
        // 创建测试管理员用户
        function createTestAdmin() {
            // 使用固定的ID作为测试管理员
            const testAdminId = 'test_admin';
            
            // 设置为管理员
            adminUsersRef.child(testAdminId).set(true)
                .then(() => {
                    console.log('测试管理员账号已创建:', testAdminId);
                    // 通知用户
                    alert('测试管理员账号已创建，请使用测试账号登录。用户ID: test_admin');
                })
                .catch((error) => {
                    console.error('创建测试管理员失败:', error);
                    alert('创建测试管理员失败: ' + error.message);
                });
        }
        
        // 可以在控制台使用以下命令创建测试管理员:
        // createTestAdmin();
    </script>

    <!-- 添加快速描述弹窗 -->
    <div class="quick-desc-popup" id="quickDescPopup" style="display:none;">
        <div class="form-header">
            <h2 class="form-title" id="quickAddTitle">快速添加描述</h2>
            <button class="form-close" id="quickDescClose" style="background:none;border:none;color:#fff;font-size:24px;cursor:pointer;">&times;</button>
        </div>
        <div class="form-group">
            <textarea class="form-textarea" id="quickDescInput" placeholder="请输入事件描述..." style="width:100%;padding:12px;border-radius:8px;border:1px solid #444;background-color:#2c2c2e;color:#fff;font-size:16px;min-height:100px;resize:vertical;"></textarea>
            <div id="quickGeocodeStatus" style="margin-top:5px;font-size:14px;color:#ffcc00;display:none;"></div>
        </div>
        <button class="submit-btn" id="quickDescSubmit">添加到地图</button>
    </div>

    <!-- 更新按钮和弹窗文本 -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 确保i18n对象包含所需的字段
            if (typeof i18n !== 'undefined') {
                // 添加可能缺失的翻译字段
                i18n.zh = i18n.zh || {};
                i18n.en = i18n.en || {};
                
                // 添加快速添加描述相关的翻译
                i18n.zh.quickAddDesc = i18n.zh.quickAddDesc || '快速添加';
                i18n.zh.quickAddTitle = i18n.zh.quickAddTitle || '快速添加描述';
                i18n.zh.quickDescPlaceholder = i18n.zh.quickDescPlaceholder || '请输入事件描述...';
                i18n.zh.addToMap = i18n.zh.addToMap || '添加到地图';
                
                i18n.en.quickAddDesc = i18n.en.quickAddDesc || 'Quick Add';
                i18n.en.quickAddTitle = i18n.en.quickAddTitle || 'Quick Add Description';
                i18n.en.quickDescPlaceholder = i18n.en.quickDescPlaceholder || 'Enter event description...';
                i18n.en.addToMap = i18n.en.addToMap || 'Add to Map';
            } else {
                // 如果i18n对象不存在，创建一个简单的版本
                window.i18n = {
                    zh: {
                        quickAddDesc: '快速添加',
                        quickAddTitle: '快速添加描述',
                        quickDescPlaceholder: '请输入事件描述...',
                        addToMap: '添加到地图',
                        geocoding: '正在解析位置...',
                        geocodeSuccess: '位置已找到',
                        geocodeError: '位置解析失败',
                        translation: '翻译: '
                    },
                    en: {
                        quickAddDesc: 'Quick Add',
                        quickAddTitle: 'Quick Add Description',
                        quickDescPlaceholder: 'Enter event description...',
                        addToMap: 'Add to Map',
                        geocoding: 'Geocoding...',
                        geocodeSuccess: 'Location found',
                        geocodeError: 'Geocoding failed',
                        translation: 'Translation: '
                    }
                };
                
                // 设置默认语言
                window.currentLang = window.currentLang || 'zh';
            }
            
            // 更新快速添加描述按钮文本
            function updateQuickAddText() {
                const quickAddBtn = document.getElementById('quickAddBtn');
                const quickAddTitle = document.getElementById('quickAddTitle');
                const quickDescInput = document.getElementById('quickDescInput');
                const quickDescSubmit = document.getElementById('quickDescSubmit');
                
                if (quickAddBtn) quickAddBtn.textContent = i18n[currentLang].quickAddDesc;
                if (quickAddTitle) quickAddTitle.textContent = i18n[currentLang].quickAddTitle;
                if (quickDescInput) quickDescInput.placeholder = i18n[currentLang].quickDescPlaceholder;
                if (quickDescSubmit) quickDescSubmit.textContent = i18n[currentLang].addToMap;
            }
            
            // 初始更新
            try {
                updateQuickAddText();
            } catch (error) {
                console.error("Error updating quick add text:", error);
            }
            
            // 语言切换时更新文本
            const langSwitchBtn = document.getElementById('langSwitchBtn');
            if (langSwitchBtn) {
                const originalLangSwitchHandler = langSwitchBtn.onclick;
                langSwitchBtn.onclick = function(e) {
                    if (originalLangSwitchHandler) {
                        originalLangSwitchHandler.call(this, e);
                    }
                    try {
                        updateQuickAddText();
                    } catch (error) {
                        console.error("Error updating text after language switch:", error);
                    }
                };
            }
        });
    </script>

    <!-- 直接添加描述按钮事件 -->
    <script>
        document.getElementById('quickAddBtn').addEventListener('click', function(e) {
            e.preventDefault();
            // 显示快速描述弹窗
            document.getElementById('quickDescPopup').style.display = 'block';
        });

        // 关闭快速描述弹窗
        document.getElementById('quickDescClose').addEventListener('click', function() {
            document.getElementById('quickDescPopup').style.display = 'none';
        });

        // 处理快速描述提交
        document.getElementById('quickDescSubmit').addEventListener('click', function() {
            const description = document.getElementById('quickDescInput').value.trim();
            if (!description) {
                alert(currentLang === 'zh' ? '请输入描述' : 'Please enter a description');
                return;
            }
            
            // 显示状态
            const quickGeocodeStatus = document.getElementById('quickGeocodeStatus');
            quickGeocodeStatus.textContent = i18n[currentLang].geocoding;
            quickGeocodeStatus.style.display = 'block';
            quickGeocodeStatus.style.color = '#ffcc00';
            
            // 使用地理编码API查找位置
            const geocoder = new google.maps.Geocoder();
            // 添加墨尔本作为偏好地点
            let searchQuery = description + ' Melbourne Australia';
            
            // 对于中文描述，添加翻译
            if (/[\u4e00-\u9fa5]/.test(description)) {
                // 简单的常见地点中英文映射
                const cnToEnMap = {
                    '墨尔本': 'Melbourne',
                    '中央商务区': 'CBD',
                    '南岸': 'Southbank',
                    '圣基尔达': 'St Kilda',
                    '卡尔顿': 'Carlton',
                    '菲茨罗伊': 'Fitzroy',
                    '多克兰兹': 'Docklands',
                    '火车站': 'Train Station',
                    '商场': 'Shopping Centre',
                    '图书馆': 'Library',
                    '大学': 'University',
                    '医院': 'Hospital',
                    '公园': 'Park',
                    '湖': 'Lake',
                    '河': 'River',
                    '广场': 'Square',
                    '街': 'Street',
                    '路': 'Road',
                    '大道': 'Avenue'
                };
                
                // 尝试替换中文关键词
                for (const [cn, en] of Object.entries(cnToEnMap)) {
                    if (description.includes(cn)) {
                        searchQuery = description.replace(cn, en) + ' Melbourne Australia';
                        break;
                    }
                }
            }
            
            geocoder.geocode({
                'address': searchQuery,
                'bounds': new google.maps.LatLngBounds(
                    // 墨尔本区域大致边界
                    new google.maps.LatLng(-38.0, 144.5),
                    new google.maps.LatLng(-37.5, 145.5)
                )
            }, (results, status) => {
                if (status === 'OK' && results[0]) {
                    const location = results[0].geometry.location;
                    
                    // 直接添加到地图上
                    addQuickReportMarker({
                        lat: location.lat(),
                        lng: location.lng()
                    }, description);
                    
                    // 更新状态显示
                    quickGeocodeStatus.textContent = i18n[currentLang].geocodeSuccess;
                    quickGeocodeStatus.style.color = '#34c759';
                    
                    // 关闭弹窗
                    setTimeout(() => {
                        document.getElementById('quickDescPopup').style.display = 'none';
                        document.getElementById('quickDescInput').value = '';
                        quickGeocodeStatus.style.display = 'none';
                    }, 1500);
                    
                    // 向用户发送弹幕反馈
                    sendDanmaku(currentLang === 'zh' ? 
                        `已根据"${description}"添加标记` : 
                        `Added marker based on "${description}"`
                    );
                    
                    // 移动地图到该位置
                    map.setCenter(location);
                    map.setZoom(16);
                } else {
                    // 地理编码失败，回退到使用预设的地点坐标
                    quickGeocodeStatus.textContent = i18n[currentLang].geocodeError;
                    quickGeocodeStatus.style.color = '#ff9500'; // 改为警告色
                    
                    // 记录地理编码失败原因，用于调试
                    console.error('Geocode failed:', status);
                    
                    // 向用户发送弹幕提示
                    sendDanmaku(currentLang === 'zh' ? 
                        '地理编码失败，尝试使用预设位置匹配...' : 
                        'Geocoding failed, trying to match with preset locations...'
                    );
                    
                    // 使用预设位置字典作为备选方案
                    const melbourneLocations = {
                        // 墨尔本中央商务区
                        'cbd': { lat: -37.8136, lng: 144.9631 },
                        'melbourne cbd': { lat: -37.8136, lng: 144.9631 },
                        '墨尔本中央商务区': { lat: -37.8136, lng: 144.9631 },
                        '中央商务区': { lat: -37.8136, lng: 144.9631 },

                        // 墨尔本大学
                        'melbourne university': { lat: -37.7963, lng: 144.9614 },
                        '墨尔本大学': { lat: -37.7963, lng: 144.9614 },
                        '大学': { lat: -37.7963, lng: 144.9614 },

                        // 南岸
                        'southbank': { lat: -37.8217, lng: 144.9647 },
                        '南岸': { lat: -37.8217, lng: 144.9647 },

                        // 圣基尔达
                        'st kilda': { lat: -37.8680, lng: 144.9809 },
                        'st. kilda': { lat: -37.8680, lng: 144.9809 },
                        '圣基尔达': { lat: -37.8680, lng: 144.9809 },

                        // 卡尔顿
                        'carlton': { lat: -37.8008, lng: 144.9675 },
                        '卡尔顿': { lat: -37.8008, lng: 144.9675 },

                        // 菲茨罗伊
                        'fitzroy': { lat: -37.7989, lng: 144.9774 },
                        '菲茨罗伊': { lat: -37.7989, lng: 144.9774 },

                        // 多克兰兹
                        'docklands': { lat: -37.8153, lng: 144.9457 },
                        '多克兰兹': { lat: -37.8153, lng: 144.9457 },

                        // 佛林德斯街车站
                        'flinders street station': { lat: -37.8183, lng: 144.9671 },
                        '佛林德斯街车站': { lat: -37.8183, lng: 144.9671 },
                        'flinders': { lat: -37.8183, lng: 144.9671 },

                        // 南十字星车站
                        'southern cross station': { lat: -37.8183, lng: 144.9527 },
                        '南十字星车站': { lat: -37.8183, lng: 144.9527 },
                        
                        // 默认位置 - 墨尔本中心
                        'default': MELBOURNE_CENTER
                    };
                    
                    // 转换描述为小写以便匹配
                    const lowerDescription = description.toLowerCase();
                    
                    // 尝试查找匹配的位置
                    let matchedLocation = null;
                    
                    // 检查是否有精确匹配
                    Object.keys(melbourneLocations).forEach(key => {
                        if (lowerDescription.includes(key)) {
                            matchedLocation = melbourneLocations[key];
                        }
                    });
                    
                    // 如果没有找到匹配，使用默认位置
                    if (!matchedLocation) {
                        // 发送一个提示，告知用户使用了默认位置
                        sendDanmaku(currentLang === 'zh' ? 
                            '未找到精确匹配，使用墨尔本中心位置' : 
                            'No exact match found, using Melbourne center'
                        );
                        matchedLocation = melbourneLocations.default;
                    } else {
                        // 已找到预设位置匹配
                        quickGeocodeStatus.textContent = i18n[currentLang].geocodeSuccess;
                        quickGeocodeStatus.style.color = '#34c759';
                        
                        sendDanmaku(currentLang === 'zh' ? 
                            '已从预设位置中找到匹配' : 
                            'Match found in preset locations'
                        );
                    }
                    
                    // 直接添加到地图上
                    addQuickReportMarker(matchedLocation, description);
                    
                    // 更新状态
                    setTimeout(() => {
                        document.getElementById('quickDescPopup').style.display = 'none';
                        document.getElementById('quickDescInput').value = '';
                        quickGeocodeStatus.style.display = 'none';
                    }, 1500);
                    
                    // 移动地图到该位置
                    map.setCenter(matchedLocation);
                    map.setZoom(16);
                }
            });
        });

        // 为快速描述输入框添加回车键事件
        document.getElementById('quickDescInput').addEventListener('keydown', function(e) {
            // 当按下Ctrl+Enter或Command+Enter时触发
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                e.preventDefault(); // 阻止默认行为
                document.getElementById('quickDescSubmit').click();
            }
        });

        // 添加快速报告标记
        function addQuickReportMarker(location, description) {
            try {
                if (!map) return null;
                
                // 默认使用狗emoji作为标记
                let emoji = "🐶"; // 默认使用狗的emoji
                
                // 根据描述可以选择不同表情(保留这部分以便未来可能需要的特殊情况处理)
                if (description && (description.toLowerCase().includes('traffic') || description.toLowerCase().includes('交通'))) {
                    emoji = "🚗";
                } else if (description && (description.toLowerCase().includes('food') || description.toLowerCase().includes('餐'))) {
                    emoji = "🍔";
                } else if (description && (description.toLowerCase().includes('event') || description.toLowerCase().includes('活动'))) {
                    emoji = "🎪";
                } else if (description && (description.toLowerCase().includes('police') || description.toLowerCase().includes('警察'))) {
                    emoji = "👮";
                } else if (description && (description.toLowerCase().includes('accident') || description.toLowerCase().includes('事故'))) {
                    emoji = "⚠️";
                } else {
                    // 其他所有情况均使用狗emoji
                    emoji = "🐶";
                }
                
                // 创建标记图标
                const markerIcon = {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(
                        `<svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" viewBox="0 0 42 42">
                            <circle cx="21" cy="21" r="20" fill="white" opacity="0.95"/>
                            <text x="21" y="29" font-size="24" text-anchor="middle" fill="black">${emoji}</text>
                        </svg>`
                    ),
                    scaledSize: new google.maps.Size(42, 42),
                    anchor: new google.maps.Point(21, 21)
                };
                
                // 创建标记数据对象
                const reportData = {
                    id: Date.now(), // 使用时间戳作为ID
                    lat: location.lat,
                    lng: location.lng,
                    description: description,
                    originalDescription: description,
                    time: new Date().toISOString(),
                    emoji: emoji,
                    userName: document.getElementById('userDisplayName').textContent || (currentLang === 'zh' ? '用户' : 'User'),
                    userId: currentUserId
                };
                
                // 使用传统Marker API创建标记
                const marker = new google.maps.Marker({
                    position: location,
                    map: map,
                    icon: markerIcon,
                    animation: google.maps.Animation.DROP,
                    title: description,
                    zIndex: 999
                });
                
                // 将报告数据保存到标记
                marker.reportData = reportData;
                
                // 创建信息窗口，在鼠标悬停时显示简短描述
                const infoWindow = new google.maps.InfoWindow({
                    content: `<div style="max-width:200px;font-family:sans-serif;">
                        <p style="margin:8px 0;font-weight:bold;">${emoji} ${description}</p>
                        <p style="margin:5px 0;color:#666;font-size:12px;">👤 ${reportData.userName}</p>
                        <p style="margin:5px 0;color:#777;font-size:11px;">${new Date(reportData.time).toLocaleString()}</p>
                    </div>`
                });
                
                // 鼠标悬停时显示信息窗口
                marker.addListener('mouseover', function() {
                    infoWindow.open(map, marker);
                });
                
                marker.addListener('mouseout', function() {
                    infoWindow.close();
                });
                
                // 点击标记时显示详细信息
                marker.addListener("click", function() {
                    console.log('Quick report marker clicked:', this.reportData.id);
                    // 关闭所有活动的信息窗口
                    if (this.infoWindow) this.infoWindow.close();
                    showReportDetails(this.reportData);
                });
                
                // 保存infoWindow的引用到marker对象上
                marker.infoWindow = infoWindow;
                
                // 添加到标记数组
                markers.push(marker);
                
                // 将数据保存到Firebase或Cloudflare
                console.log("保存标记数据，存储系统:", useCloudflare ? "Cloudflare" : "Firebase");
                
                if (useCloudflare) {
                    // 保存到Cloudflare
                    saveReportToCloudflare(reportData);
                } else {
                    // 保存到Firebase
                    reportsRef.child(reportData.id.toString()).set(reportData)
                        .then(() => {
                            console.log("Quick report saved to Firebase", reportData);
                            
                            // 增加用户报告计数
                            incrementUserReportCount();
                            
                            // 同步到Cloudflare
                            if (syncToCloudflare) {
                                syncReportToCloudflare(reportData);
                            }
                        })
                        .catch((error) => {
                            console.error("Error saving quick report to Firebase:", error);
                            sendDanmaku(currentLang === 'zh' ? 
                                '标记已添加到地图，但保存到服务器失败' : 
                                'Marker added to map, but failed to save to server'
                            );
                        });
                }
                
                return marker;
            } catch (error) {
                console.error("添加快速报告标记时出错:", error, location, description);
                // 显示错误消息
                sendDanmaku(currentLang === 'zh' ? 
                    '添加标记失败，请重试' : 
                    'Failed to add marker, please try again'
                );
                return null;
            }
        }
    </script>
    
    <!-- PWA初始化和推送通知 -->
    <script>
        // 注册Service Worker，启用PWA功能
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async function() {
                try {
                    // 为GitHub Pages环境处理正确的Service Worker路径
                    let swPath = './service-worker.js';
                    
                    // 检测GitHub Pages环境并修正路径
                    if (window.location.hostname.includes('github.io')) {
                        // 获取仓库名称(从路径的第一部分)
                        const pathSegments = window.location.pathname.split('/');
                        if (pathSegments.length >= 2 && pathSegments[1]) {
                            const repoName = pathSegments[1];
                            swPath = '/' + repoName + '/service-worker.js';
                            console.log('[Service Worker] 检测到GitHub Pages环境，使用路径:', swPath);
                        }
                    }
                    
                    // 注册Service Worker - 使用修正后的路径
                    const registration = await navigator.serviceWorker.register(swPath, {
                        scope: './'
                    });
                    console.log('Service Worker 注册成功，作用域为:', registration.scope);
                    
                    // 初始化通知功能
                    if ('Notification' in window && 'PushManager' in window) {
                        // 如果用户已登录，设置用户ID
                        if (currentUserId) {
                            window.notificationHandler.setCurrentUserId(currentUserId);
                        }
                        
                        // 初始化通知功能
                        const notificationSupported = await window.notificationHandler.initNotifications();
                        
                        if (notificationSupported) {
                            console.log('推送通知功能已初始化');
                            
                            // 主动请求通知权限
                            if (Notification.permission === 'default') {
                                console.log('主动请求通知权限...');
                                const permission = await Notification.requestPermission();
                                console.log('通知权限请求结果:', permission);
                            }
                            
                            // 如果有权限，尝试订阅
                            if (Notification.permission === 'granted') {
                                try {
                                    const isAlreadySubscribed = await window.notificationHandler.isSubscribedToPush();
                                    
                                    if (!isAlreadySubscribed) {
                                        const subscription = await window.notificationHandler.subscribeUserToPush();
                                        console.log('成功订阅推送通知:', subscription);
                                    }
                                } catch (error) {
                                    console.error('订阅推送通知失败:', error);
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.error('Service Worker 注册失败:', error);
                }
            });
        }
    </script>
    
    <!-- 添加通知权限请求按钮 -->
    <div id="notificationPrompt" style="position:fixed;bottom:80px;left:50%;transform:translateX(-50%);background-color:rgba(0,0,0,0.8);color:white;padding:12px 20px;border-radius:10px;font-size:14px;text-align:center;display:none;z-index:2000;box-shadow:0 4px 12px rgba(0,0,0,0.3);width:90%;max-width:300px;">
        <p style="margin:0 0 10px 0;">允许接收最新的地图标记通知？</p>
        <div style="display:flex;justify-content:space-between;gap:10px;">
            <button id="enableNotifications" style="background:#0071e3;border:none;color:white;padding:8px 16px;border-radius:6px;cursor:pointer;font-weight:bold;flex:1;">启用通知</button>
            <button id="dismissPrompt" style="background:rgba(255,255,255,0.2);border:none;color:white;padding:8px 16px;border-radius:6px;cursor:pointer;flex:1;">取消</button>
        </div>
    </div>
    
    <script>
        // 显示通知权限提示
        setTimeout(function() {
            // 如果通知权限状态是默认(未决定)，显示提示
            if (Notification.permission === 'default') {
                document.getElementById('notificationPrompt').style.display = 'block';
            }
        }, 3000); // 页面加载3秒后显示
        
        // 启用通知按钮点击事件
        document.getElementById('enableNotifications').addEventListener('click', async function() {
            try {
                // 请求权限
                const permission = await Notification.requestPermission();
                if (permission === 'granted') {
                    // 订阅推送
                    await window.notificationHandler.subscribeUserToPush();
                    alert('推送通知已启用，你将收到新标记的通知！');
                }
            } catch (error) {
                console.error('启用通知失败:', error);
            } finally {
                // 隐藏提示
                document.getElementById('notificationPrompt').style.display = 'none';
            }
        });
        
        // 取消按钮点击事件
        document.getElementById('dismissPrompt').addEventListener('click', function() {
            document.getElementById('notificationPrompt').style.display = 'none';
        });
    </script>

    <!-- 添加通知按钮到页面导航/控制区域 -->
    <div class="map-control-buttons" style="position:fixed;top:15px;right:15px;z-index:1000;display:flex;flex-direction:column;gap:10px;">
        <!-- 通知按钮 -->
        <button id="notificationBtn" style="background-color:white;width:42px;height:42px;border-radius:50%;display:flex;align-items:center;justify-content:center;border:none;box-shadow:0 2px 6px rgba(0,0,0,0.3);cursor:pointer;font-size:20px;color:#333;">🔔</button>
        
        <!-- 语言切换按钮 (保留原有的) -->
        <button id="langSwitchBtn" style="background-color:white;width:42px;height:42px;border-radius:50%;display:flex;align-items:center;justify-content:center;border:none;box-shadow:0 2px 6px rgba(0,0,0,0.3);cursor:pointer;color:#333;font-weight:bold;">
            <span id="langSwitchText">中</span>
        </button>
    </div>

    <!-- 添加通知按钮的事件处理 -->
    <script>
        // 通知按钮点击事件（切换通知订阅状态）
        document.getElementById('notificationBtn').addEventListener('click', async function() {
            try {
                // 根据当前权限状态处理
                switch (Notification.permission) {
                    case 'granted':
                        // 已有权限，检查是否已订阅
                        const isSubscribed = await window.notificationHandler.isSubscribedToPush();
                        if (isSubscribed) {
                            if (confirm(currentLang === 'zh' ? 
                                '你已开启通知。是否要关闭推送通知？' : 
                                'You have enabled notifications. Do you want to disable them?')) {
                                await window.notificationHandler.unsubscribeFromPush();
                                alert(currentLang === 'zh' ? 
                                    '通知已关闭' : 
                                    'Notifications disabled');
                                this.innerText = '🔕';
                            }
                        } else {
                            // 有权限但未订阅
                            await window.notificationHandler.subscribeUserToPush();
                            alert(currentLang === 'zh' ? 
                                '通知已开启，你将收到新标记的提醒' : 
                                'Notifications enabled. You will be notified of new markers');
                            this.innerText = '🔔';
                        }
                        break;
                    
                    case 'default':
                        // 请求权限
                        const permission = await Notification.requestPermission();
                        if (permission === 'granted') {
                            await window.notificationHandler.subscribeUserToPush();
                            alert(currentLang === 'zh' ? 
                                '通知已开启，你将收到新标记的提醒' : 
                                'Notifications enabled. You will be notified of new markers');
                            this.innerText = '🔔';
                        }
                        break;
                    
                    case 'denied':
                        // 权限被拒绝，提醒用户在浏览器设置中更改
                        alert(currentLang === 'zh' ? 
                            '通知权限已被拒绝。请在浏览器设置中允许通知以接收更新。' : 
                            'Notification permission denied. Please enable notifications in your browser settings to receive updates.');
                        this.innerText = '🔕';
                        break;
                }
            } catch (error) {
                console.error('通知操作失败:', error);
                alert(currentLang === 'zh' ? 
                    '设置通知时出错' : 
                    'Error while setting up notifications');
            }
        });
        
        // 添加长按发送测试通知功能
        let pressTimer;
        let isLongPress = false;

        document.getElementById('notificationBtn').addEventListener('mousedown', function() {
            // 开始计时
            isLongPress = false;
            pressTimer = window.setTimeout(function() {
                isLongPress = true;
                sendTestNotification();
            }, 800); // 长按800毫秒
        });

        document.getElementById('notificationBtn').addEventListener('mouseup', function() {
            // 清除计时器
            clearTimeout(pressTimer);
        });

        document.getElementById('notificationBtn').addEventListener('mouseleave', function() {
            // 如果鼠标离开按钮，也清除计时器
            clearTimeout(pressTimer);
        });
        
        // 移动设备支持
        document.getElementById('notificationBtn').addEventListener('touchstart', function(e) {
            // 开始计时
            isLongPress = false;
            pressTimer = window.setTimeout(function() {
                isLongPress = true;
                sendTestNotification();
            }, 800); // 长按800毫秒
            e.preventDefault(); // 防止触发点击事件
        });

        document.getElementById('notificationBtn').addEventListener('touchend', function() {
            // 清除计时器
            clearTimeout(pressTimer);
            if (!isLongPress) {
                // 如果不是长按，模拟点击事件
                this.click();
            }
        });
        
        // 测试通知函数
        async function sendTestNotification() {
            if (Notification.permission !== 'granted') {
                alert(currentLang === 'zh' ? 
                    '需要先授予通知权限' : 
                    'Notification permission needed first');
                return;
            }
            
            try {
                // 检查是否已订阅
                const isSubscribed = await window.notificationHandler.isSubscribedToPush();
                
                if (!isSubscribed) {
                    if (confirm(currentLang === 'zh' ? 
                        '需要先订阅推送通知才能测试。是否现在订阅？' : 
                        'You need to subscribe to push notifications first. Subscribe now?')) {
                        await window.notificationHandler.subscribeUserToPush();
                    } else {
                        return;
                    }
                }
                
                // 发送测试通知
                if ('serviceWorker' in navigator) {
                    const registration = await navigator.serviceWorker.ready;
                    
                    // 本地测试通知
                    registration.showNotification('PtvAlert 测试通知', {
                        body: currentLang === 'zh' ? 
                            '这是一条测试通知，推送功能工作正常！' : 
                            'This is a test notification. Push function works!',
                        icon: './images/icon-192x192.png',
                        badge: './images/icon-72x72.png',
                        vibrate: [100, 50, 100],
                        data: {
                            time: new Date().getTime(),
                            url: './'
                        },
                        actions: [
                            {
                                action: 'view',
                                title: currentLang === 'zh' ? '查看' : 'View'
                            }
                        ]
                    });
                    
                    // 尝试也通过服务器发送测试通知
                    try {
                        await window.notificationHandler.sendTestNotification();
                    } catch (error) {
                        console.warn('服务器测试通知失败，但本地测试通知已发送:', error);
                    }
                }
            } catch (error) {
                console.error('发送测试通知失败:', error);
                alert(currentLang === 'zh' ? 
                    '发送测试通知失败: ' + error.message : 
                    'Failed to send test notification: ' + error.message);
            }
        }
        
        // 初始化通知按钮状态
        window.addEventListener('load', async function() {
            const notificationBtn = document.getElementById('notificationBtn');
            
            if (Notification.permission === 'granted') {
                const isSubscribed = await window.notificationHandler.isSubscribedToPush()
                    .catch(() => false);
                
                notificationBtn.innerText = isSubscribed ? '🔔' : '🔕';
            } else {
                notificationBtn.innerText = '🔕';
            }
            
            // 添加提示工具提示
            notificationBtn.title = currentLang === 'zh' ? 
                '点击开启/关闭通知，长按发送测试通知' : 
                'Click to enable/disable notifications, long press to send a test notification';
        });
    </script>

    <!-- 全局变量声明 -->
    <script>
    // 全局变量声明
    window.currentLang = 'zh'; // 默认语言
    </script>

    <script>
        // 在页面加载时检查并卸载所有服务工作线程
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async function() {
                try {
                    console.log('开始处理Service Worker注册...');
                    
                    // 卸载所有服务工作线程以确保使用最新版本
                    const registrations = await navigator.serviceWorker.getRegistrations();
                    for (let registration of registrations) {
                        console.log('卸载旧的服务工作线程', registration.scope);
                        await registration.unregister();
                    }
                    console.log('所有服务工作线程已卸载，将重新注册最新版本');
                    
                    // 使用简单的相对路径注册Service Worker
                    try {
                        console.log('尝试使用相对路径注册Service Worker...');
                        const registration = await navigator.serviceWorker.register('./service-worker.js', {
                            scope: './'
                        });
                        console.log('Service Worker注册成功:', registration.scope);
                    } catch (mainError) {
                        console.error('使用主Service Worker注册失败:', mainError);
                        
                        // 尝试使用备用Service Worker
                        try {
                            console.log('尝试注册备用Service Worker...');
                            const fallbackReg = await navigator.serviceWorker.register('./fallback-service-worker.js', {
                                scope: './'
                            });
                            console.log('备用Service Worker注册成功:', fallbackReg.scope);
                        } catch (fallbackError) {
                            console.error('备用Service Worker注册也失败:', fallbackError);
                            
                            // 最后的回退 - 内联最小Service Worker
                            if (window.location.hostname.includes('github.io')) {
                                console.log('尝试使用内联Service Worker作为最后的回退...');
                                
                                const minimalSWBlob = new Blob([`
                                    // 最小化内联Service Worker
                                    self.addEventListener('install', () => self.skipWaiting());
                                    self.addEventListener('activate', event => event.waitUntil(clients.claim()));
                                    self.addEventListener('fetch', event => event.respondWith(fetch(event.request)));
                                    console.log('内联最小Service Worker已激活');
                                `], {type: 'application/javascript'});
                                
                                const minimalSWUrl = URL.createObjectURL(minimalSWBlob);
                                
                                try {
                                    const inlineReg = await navigator.serviceWorker.register(minimalSWUrl, {
                                        scope: './'
                                    });
                                    console.log('内联Service Worker注册成功:', inlineReg.scope);
                                } catch (inlineError) {
                                    console.error('所有Service Worker注册方法都失败:', inlineError);
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.error('处理服务工作线程时出错:', error);
                }
            });
        }
    </script>

    <!-- 添加主动推送请求提示功能 -->
    <div id="notification-prompt-banner" style="display: none; position: fixed; bottom: 20px; left: 10px; right: 10px; max-width: 600px; margin: 0 auto; background: rgba(0,0,0,0.8); color: white; padding: 15px; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.3); z-index: 1000; font-size: 14px;">
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center;">
                <div style="font-size: 24px; margin-right: 10px;">🔔</div>
                <div>
                    <div style="font-weight: bold; margin-bottom: 5px;">接收地图标记更新</div>
                    <div>开启通知，及时获取地图上的新标记信息！</div>
                </div>
            </div>
            <div>
                <button id="enable-notifications-btn" style="background: #0071e3; color: white; border: none; padding: 8px 15px; border-radius: 5px; margin-right: 10px; cursor: pointer;">开启通知</button>
                <button id="dismiss-prompt-btn" style="background: transparent; color: #ccc; border: 1px solid #ccc; padding: 8px 15px; border-radius: 5px; cursor: pointer;">暂不需要</button>
            </div>
        </div>
    </div>
    
    <!-- 处理推送通知消息 -->
    <script>
        // 处理从Service Worker发来的消息
        navigator.serviceWorker.addEventListener('message', function(event) {
            console.log('收到Service Worker消息:', event.data);
            
            // 处理显示标记消息
            if (event.data.type === 'SHOW_MARKER' && event.data.markerId) {
                // 尝试查找并显示对应标记
                if (window.showMarkerById && typeof window.showMarkerById === 'function') {
                    window.showMarkerById(event.data.markerId, event.data.action === 'view-map');
                } else {
                    console.log('标记显示函数未定义，无法显示指定标记');
                }
            }
        });
        
        // 页面加载时检查并主动请求通知权限
        window.addEventListener('load', function() {
            // 如果已经请求过权限并记录在本地存储中，不再显示
            if (localStorage.getItem('notification-prompt-shown')) {
                return;
            }
            
            // 检查Notification API支持
            if (!('Notification' in window)) {
                console.log('此浏览器不支持通知功能');
                return;
            }
            
            // 如果已有权限，直接初始化
            if (Notification.permission === 'granted') {
                initNotifications();
                return;
            }
            
            // 如果已被拒绝，不再提示
            if (Notification.permission === 'denied') {
                return;
            }
            
            // 延迟5秒显示通知权限提示
            setTimeout(function() {
                document.getElementById('notification-prompt-banner').style.display = 'block';
            }, 5000);
        });
        
        // 初始化通知功能
        async function initNotifications() {
            if (window.notificationHandler) {
                try {
                    // 初始化通知系统
                    await window.notificationHandler.initNotifications();
                    
                    // 设置用户ID
                    let userId = localStorage.getItem('user-id');
                    if (!userId) {
                        userId = 'user_' + Math.random().toString(36).substr(2, 9);
                        localStorage.setItem('user-id', userId);
                    }
                    window.notificationHandler.setCurrentUserId(userId);
                    
                    // 如果有权限但未订阅，自动订阅
                    if (Notification.permission === 'granted' && 
                        !(await window.notificationHandler.isSubscribedToPush())) {
                        await window.notificationHandler.subscribeUserToPush();
                        console.log('已自动订阅推送通知');
                    }
                } catch (error) {
                    console.error('初始化通知功能失败:', error);
                }
            }
        }
        
        // 按钮事件处理
        document.getElementById('enable-notifications-btn').addEventListener('click', async function() {
            try {
                document.getElementById('notification-prompt-banner').style.display = 'none';
                
                // 标记为已显示提示
                localStorage.setItem('notification-prompt-shown', 'true');
                
                // 使用通知处理程序请求权限
                if (window.notificationHandler) {
                    const granted = await window.notificationHandler.requestNotificationPermission();
                    if (granted) {
                        console.log('通知权限已获得，已订阅推送');
                    }
                } else {
                    console.error('通知处理程序未加载');
                }
            } catch (error) {
                console.error('请求通知权限失败:', error);
            }
        });
        
        // 拒绝按钮事件
        document.getElementById('dismiss-prompt-btn').addEventListener('click', function() {
            document.getElementById('notification-prompt-banner').style.display = 'none';
            localStorage.setItem('notification-prompt-shown', 'true');
        });
        
        // 显示地图标记的函数 - 应由地图组件实现
        window.showMarkerById = function(markerId, centerOnMap) {
            console.log('显示标记:', markerId, centerOnMap ? '并居中显示' : '');
            // 地图组件应实现此函数的实际逻辑
        };
    </script>
    
    <!-- 添加诊断控制台功能，方便在浏览器控制台中调试 -->
    <script>
        // 创建一个全局诊断函数，方便在浏览器控制台中使用
        window.diagnose = function() {
            console.log('===== PtvAlert 诊断工具 =====');
            
            // 环境信息
            console.log('【环境信息】');
            console.log('- 页面URL:', window.location.href);
            console.log('- 主机名:', window.location.hostname);
            console.log('- 是否GitHub Pages:', window.IS_GITHUB_PAGES ? '是' : '否');
            
            if (window.IS_GITHUB_PAGES) {
                console.log('- GitHub Pages基础路径:', window.GITHUB_PAGES_BASE_PATH);
                console.log('- API基础URL:', window.API_BASE_URL);
            }
            
            // Service Worker诊断
            console.log('\n【Service Worker状态】');
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.getRegistrations()
                    .then(registrations => {
                        if (registrations.length === 0) {
                            console.log('- 未注册Service Worker');
                        } else {
                            registrations.forEach((reg, idx) => {
                                console.log(`- Service Worker #${idx+1}:`);
                                console.log('  · 作用域:', reg.scope);
                                console.log('  · 状态:', reg.active ? '活动' : (reg.installing ? '安装中' : (reg.waiting ? '等待' : '未知')));
                                
                                if (reg.active) {
                                    console.log('  · 脚本URL:', reg.active.scriptURL);
                                }
                                
                                console.log('  · 是否伪Service Worker:', reg.__fake ? '是' : '否');
                            });
                        }
                    })
                    .catch(err => {
                        console.error('- 获取Service Worker注册信息失败:', err);
                    });
            } else {
                console.log('- 浏览器不支持Service Worker');
            }
            
            // 通知权限
            console.log('\n【通知权限】');
            if ('Notification' in window) {
                console.log('- 当前权限状态:', Notification.permission);
                
                if (window.notificationHandler) {
                    console.log('- 通知处理程序已加载');
                    window.notificationHandler.isSubscribedToPush()
                        .then(isSubscribed => {
                            console.log('- 是否已订阅推送:', isSubscribed ? '是' : '否');
                        })
                        .catch(err => {
                            console.error('- 检查推送订阅状态失败:', err);
                        });
                } else {
                    console.log('- 通知处理程序未加载');
                }
            } else {
                console.log('- 浏览器不支持通知API');
            }
            
            // 缓存信息
            console.log('\n【缓存信息】');
            if ('caches' in window) {
                caches.keys()
                    .then(cacheNames => {
                        if (cacheNames.length === 0) {
                            console.log('- 无缓存');
                        } else {
                            console.log('- 缓存列表:');
                            cacheNames.forEach(name => {
                                console.log('  · ' + name);
                            });
                        }
                    })
                    .catch(err => {
                        console.error('- 获取缓存列表失败:', err);
                    });
            } else {
                console.log('- 浏览器不支持Cache API');
            }
            
            // 故障排除指南
            console.log('\n【常见故障排除】');
            console.log('1. 如果Service Worker注册失败，尝试以下步骤:');
            console.log('   - 清除浏览器缓存: Chrome -> 设置 -> 隐私设置和安全性 -> 清除浏览数据');
            console.log('   - 确保URL使用https或localhost');
            console.log('   - 在控制台运行: navigator.serviceWorker.getRegistrations().then(r => r.forEach(reg => reg.unregister()))');
            
            console.log('2. 如果推送通知不工作:');
            console.log('   - 检查浏览器通知权限设置');
            console.log('   - 重新订阅推送: window.notificationHandler.subscribeUserToPush()');
            
            console.log('3. 修复GitHub Pages路径问题:');
            console.log('   - 刷新页面并清除缓存: Ctrl+F5 或 Cmd+Shift+R');
            console.log('   - 在控制台运行: window.runGitHubPagesDiagnostics()');
            
            console.log('\n如需重新运行诊断，请在控制台输入: window.diagnose()');
            console.log('===== 诊断结束 =====');
        };
        
        // 在控制台中提示用户可以使用的诊断功能
        console.log('%c 🛠️ PtvAlert 诊断工具可用! 输入 window.diagnose() 或 diagnose() 以获取详细信息', 'background:#0071e3;color:white;padding:5px 10px;border-radius:4px;font-weight:bold;');
    </script>

    <!-- 添加主动推送请求提示功能 -->
    <div id="notification-prompt-banner" style="display: none; position: fixed; bottom: 20px; left: 10px; right: 10px; max-width: 600px; margin: 0 auto; background: rgba(0,0,0,0.8); color: white; padding: 15px; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.3); z-index: 1000; font-size: 14px;">
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center;">
                <div style="font-size: 24px; margin-right: 10px;">🔔</div>
                <div>
                    <div style="font-weight: bold; margin-bottom: 5px;">接收地图标记更新</div>
                    <div>开启通知，及时获取地图上的新标记信息！</div>
                </div>
            </div>
            <div>
                <button id="enable-notifications-btn" style="background: #0071e3; color: white; border: none; padding: 8px 15px; border-radius: 5px; margin-right: 10px; cursor: pointer;">开启通知</button>
                <button id="dismiss-prompt-btn" style="background: transparent; color: #ccc; border: 1px solid #ccc; padding: 8px 15px; border-radius: 5px; cursor: pointer;">暂不需要</button>
            </div>
        </div>
    </div>
    
    <!-- 添加推送按钮事件处理 -->
    <script>
        // 为添加的推送通知按钮添加事件处理
        document.addEventListener('DOMContentLoaded', function() {
            const pushButton = document.getElementById('requestPushPermission');
            if (pushButton) {
                pushButton.addEventListener('click', function() {
                    if (window.notificationHandler && typeof window.notificationHandler.requestNotificationPermission === 'function') {
                        window.notificationHandler.requestNotificationPermission();
                    } else {
                        console.error('通知处理程序不可用或缺少requestNotificationPermission方法');
                        // 回退到简单实现
                        requestPushPermissionFallback();
                    }
                });
                
                // 更新初始按钮状态
                updatePushButtonState();
            }
            
            // 简单的回退实现，用于处理通知处理程序不可用的情况
            function requestPushPermissionFallback() {
                if (!('Notification' in window)) {
                    alert('您的浏览器不支持通知功能');
                    return;
                }
                
                Notification.requestPermission().then(function(permission) {
                    console.log('通知权限结果:', permission);
                    updatePushButtonState();
                    
                    if (permission === 'granted') {
                        // 显示欢迎通知
                        new Notification('地图标记通知已启用', {
                            body: '您将收到地图上新标记的通知',
                            icon: './images/icon-192x192.png'
                        });
                        
                        // 设置标记观察器
                        setupMarkerObserverFallback();
                    }
                });
            }
            
            // 更新按钮状态
            function updatePushButtonState() {
                const pushButton = document.getElementById('requestPushPermission');
                const pushBtnText = document.getElementById('pushBtnText');
                
                if (!pushButton || !pushBtnText) return;
                
                if (Notification.permission === 'granted') {
                    pushButton.style.backgroundColor = '#34c759';
                    pushBtnText.textContent = '通知已启用';
                } else if (Notification.permission === 'denied') {
                    pushButton.style.backgroundColor = '#ff3b30';
                    pushBtnText.textContent = '通知已禁用';
                } else {
                    pushButton.style.backgroundColor = '#0071e3';
                    pushBtnText.textContent = '启用推送通知';
                }
            }
            
            // 简单的标记观察器回退实现
            function setupMarkerObserverFallback() {
                if (window._markerObserverInterval) {
                    clearInterval(window._markerObserverInterval);
                }
                
                let currentMarkerCount = window.mapMarkers ? window.mapMarkers.length : 0;
                
                window._markerObserverInterval = setInterval(() => {
                    if (!window.mapMarkers) return;
                    
                    if (window.mapMarkers.length > currentMarkerCount) {
                        const newMarkersCount = window.mapMarkers.length - currentMarkerCount;
                        const newMarkers = window.mapMarkers.slice(-newMarkersCount);
                        
                        if (Notification.permission === 'granted') {
                            new Notification('地图有新标记', {
                                body: `添加了${newMarkersCount}个新标记`,
                                icon: './images/icon-192x192.png'
                            });
                        }
                        
                        currentMarkerCount = window.mapMarkers.length;
                    }
                }, 5000);
            }
        });
    </script>

    <!-- 添加Service Worker消息处理 -->
    <script>
        // 监听来自Service Worker的消息
        navigator.serviceWorker.addEventListener('message', function(event) {
            console.log('收到Service Worker消息:', event.data);
            
            // 处理通知点击消息
            if (event.data.type === 'NOTIFICATION_CLICK') {
                const notificationData = event.data.data || {};
                console.log('处理通知点击:', notificationData);
                
                // 如果有特定标记ID，跳转到该标记
                if (notificationData.markerId && typeof window.showMarkerById === 'function') {
                    console.log('显示标记:', notificationData.markerId);
                    window.showMarkerById(notificationData.markerId, true);
                    
                    // 显示通知横幅
                    if (notificationData.markerInfo) {
                        showNotificationBanner(`标记: ${notificationData.markerInfo.title || '新标记'}`, 
                            notificationData.markerInfo.description || '');
                    }
                }
            }
        });
        
        // 显示通知横幅
        function showNotificationBanner(title, message) {
            // 创建通知横幅
            const banner = document.createElement('div');
            banner.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background-color: rgba(0,0,0,0.8);
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                max-width: 90%;
                min-width: 300px;
                display: flex;
                align-items: center;
                opacity: 0;
                transition: opacity 0.3s ease;
            `;
            
            const iconDiv = document.createElement('div');
            iconDiv.style.cssText = `
                font-size: 24px;
                margin-right: 10px;
            `;
            iconDiv.textContent = '📍';
            
            const contentDiv = document.createElement('div');
            contentDiv.style.flexGrow = '1';
            
            const titleDiv = document.createElement('div');
            titleDiv.style.fontWeight = 'bold';
            titleDiv.style.marginBottom = '4px';
            titleDiv.textContent = title;
            
            const messageDiv = document.createElement('div');
            messageDiv.style.fontSize = '14px';
            messageDiv.textContent = message;
            
            contentDiv.appendChild(titleDiv);
            contentDiv.appendChild(messageDiv);
            
            banner.appendChild(iconDiv);
            banner.appendChild(contentDiv);
            
            document.body.appendChild(banner);
            
            // 动画显示
            setTimeout(() => {
                banner.style.opacity = '1';
            }, 10);
            
            // 5秒后自动消失
            setTimeout(() => {
                banner.style.opacity = '0';
                setTimeout(() => {
                    document.body.removeChild(banner);
                }, 300);
            }, 5000);
        }
        
        // 添加测试功能
        window.testPushNotification = function() {
            if (window.notificationHandler && typeof window.notificationHandler.sendTestNotification === 'function') {
                window.notificationHandler.sendTestNotification()
                    .then(result => {
                        console.log('测试通知发送结果:', result);
                        alert('测试通知已发送');
                    })
                    .catch(error => {
                        console.error('发送测试通知失败:', error);
                        alert('发送测试通知失败: ' + error.message);
                    });
            } else {
                alert('通知处理程序不可用');
            }
        };
    </script>

    <!-- 添加推送按钮事件处理 -->
// ... existing code ...
</body>
</html>
